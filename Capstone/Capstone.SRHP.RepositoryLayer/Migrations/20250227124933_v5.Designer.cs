// <auto-generated />
using System;
using Capstone.HPTY.RepositoryLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.HPTY.RepositoryLayer.Migrations
{
    [DbContext(typeof(HPTYContext))]
    [Migration("20250227124933_v5")]
    partial class v5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMessageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionChatSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("SessionChatSessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Property<int>("ChatSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatSessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatSessionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("HotpotBrothID")
                        .HasColumnType("int")
                        .HasColumnName("HotpotBrothID");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboId");

                    b.HasIndex("HotpotBrothID");

                    b.HasIndex("IngredientId");

                    b.ToTable("Combos", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.Property<int>("ComboIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboIngredientId"));

                    b.Property<int>("ComboID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboIngredientId");

                    b.HasIndex("IngredientID");

                    b.HasIndex("ComboID", "IngredientID");

                    b.ToTable("ComboIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ConditionLog", b =>
                {
                    b.Property<int>("ConditionLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionLogId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("HotPotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoggedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilID")
                        .HasColumnType("int");

                    b.HasKey("ConditionLogId");

                    b.HasIndex("HotPotInventoryId");

                    b.HasIndex("UtensilID");

                    b.ToTable("ConditionLogs");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("LoyatyPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6377),
                            IsDelete = false,
                            LoyatyPoint = 0.0,
                            UserID = -8
                        },
                        new
                        {
                            CustomerId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6379),
                            IsDelete = false,
                            LoyatyPoint = 0.0,
                            UserID = -9
                        },
                        new
                        {
                            CustomerId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6380),
                            IsDelete = false,
                            LoyatyPoint = 200.0,
                            UserID = -10
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Property<int>("CustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationId"));

                    b.Property<int>("ComboID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotpotBrothID")
                        .HasColumnType("int")
                        .HasColumnName("HotpotBrothID");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomizationId");

                    b.HasIndex("ComboID")
                        .IsUnique();

                    b.HasIndex("HotpotBrothID");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserID");

                    b.ToTable("Customizations", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.Property<int>("CustomizationIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationIngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomizationID")
                        .HasColumnType("int");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomizationIngredientId");

                    b.HasIndex("IngredientID");

                    b.HasIndex("CustomizationID", "IngredientID");

                    b.ToTable("CustomizationIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("Percent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PointCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Property<int>("HotPotInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotPotInventoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotpotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SeriesNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotPotInventoryId");

                    b.HasIndex("HotpotId");

                    b.HasIndex("SeriesNumber")
                        .IsUnique();

                    b.ToTable("HotPotInventorys");

                    b.HasData(
                        new
                        {
                            HotPotInventoryId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6938),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7052),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0002",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7054),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7055),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0002",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7056),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 6,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7058),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 7,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7059),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0001",
                            Status = false
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Property<int>("HotpotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotpotId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HotpotTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TurtorialVideoID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotpotId");

                    b.HasIndex("HotpotTypeID");

                    b.HasIndex("TurtorialVideoID");

                    b.ToTable("Hotpots");

                    b.HasData(
                        new
                        {
                            HotpotId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6812),
                            Description = "Traditional copper hotpot with charcoal heating.",
                            HotpotTypeID = 1,
                            ImageURL = "https://example.com/images/classic-copper-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Copper",
                            Name = "Classic Copper Hotpot",
                            Price = 89.99m,
                            Quantity = 25,
                            Size = 4,
                            Status = true,
                            TurtorialVideoID = 1
                        },
                        new
                        {
                            HotpotId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6817),
                            Description = "Electric hotpot with temperature control and non-stick coating.",
                            HotpotTypeID = 2,
                            ImageURL = "https://example.com/images/modern-electric-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Stainless Steel",
                            Name = "Modern Electric Hotpot",
                            Price = 129.99m,
                            Quantity = 30,
                            Size = 6,
                            Status = true,
                            TurtorialVideoID = 2
                        },
                        new
                        {
                            HotpotId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6819),
                            Description = "Compact portable hotpot perfect for travel or small gatherings.",
                            HotpotTypeID = 3,
                            ImageURL = "https://example.com/images/mini-portable-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Aluminum",
                            Name = "Mini Portable Hotpot",
                            Price = 59.99m,
                            Quantity = 40,
                            Size = 2,
                            Status = true,
                            TurtorialVideoID = 3
                        },
                        new
                        {
                            HotpotId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6821),
                            Description = "Multi-compartment hotpot for different broths in one pot.",
                            HotpotTypeID = 4,
                            ImageURL = "https://example.com/images/dual-section-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Stainless Steel",
                            Name = "Dual Section Hotpot",
                            Price = 149.99m,
                            Quantity = 20,
                            Size = 6,
                            Status = true,
                            TurtorialVideoID = 4
                        },
                        new
                        {
                            HotpotId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6824),
                            Description = "Authentic ceramic hotpot that retains heat exceptionally well.",
                            HotpotTypeID = 5,
                            ImageURL = "https://example.com/images/traditional-ceramic-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Ceramic",
                            Name = "Traditional Ceramic Hotpot",
                            Price = 79.99m,
                            Quantity = 15,
                            Size = 4,
                            Status = true,
                            TurtorialVideoID = 5
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotpotType", b =>
                {
                    b.Property<int>("HotpotTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotpotTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotpotTypeId");

                    b.ToTable("HotpotTypes");

                    b.HasData(
                        new
                        {
                            HotpotTypeId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6416),
                            IsDelete = false,
                            Name = "Traditional"
                        },
                        new
                        {
                            HotpotTypeId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6419),
                            IsDelete = false,
                            Name = "Electric"
                        },
                        new
                        {
                            HotpotTypeId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6420),
                            IsDelete = false,
                            Name = "Portable"
                        },
                        new
                        {
                            HotpotTypeId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6421),
                            IsDelete = false,
                            Name = "Multi-compartment"
                        },
                        new
                        {
                            HotpotTypeId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6422),
                            IsDelete = false,
                            Name = "Ceramic"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IngredientTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientId");

                    b.HasIndex("IngredientTypeID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7227),
                            Description = "Thinly sliced premium beef perfect for hotpot.",
                            ImageURL = "https://example.com/images/sliced-beef.jpg",
                            IngredientTypeID = 1,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Sliced Beef",
                            Quantity = 100
                        },
                        new
                        {
                            IngredientId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7229),
                            Description = "Tender sliced lamb meat, perfect for quick cooking.",
                            ImageURL = "https://example.com/images/lamb-slices.jpg",
                            IngredientTypeID = 1,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Lamb Slices",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7230),
                            Description = "Thinly sliced pork belly with perfect fat-to-meat ratio.",
                            ImageURL = "https://example.com/images/pork-belly.jpg",
                            IngredientTypeID = 1,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Pork Belly",
                            Quantity = 75
                        },
                        new
                        {
                            IngredientId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7232),
                            Description = "Fresh, peeled and deveined shrimp.",
                            ImageURL = "https://example.com/images/shrimp.jpg",
                            IngredientTypeID = 2,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Shrimp",
                            Quantity = 90
                        },
                        new
                        {
                            IngredientId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7236),
                            Description = "Bouncy fish balls made from fresh fish paste.",
                            ImageURL = "https://example.com/images/fish-balls.jpg",
                            IngredientTypeID = 2,
                            IsDelete = false,
                            MinStockLevel = 30,
                            Name = "Fish Balls",
                            Quantity = 120
                        },
                        new
                        {
                            IngredientId = 6,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7238),
                            Description = "Fresh squid sliced into rings.",
                            ImageURL = "https://example.com/images/squid.jpg",
                            IngredientTypeID = 2,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Squid",
                            Quantity = 60
                        },
                        new
                        {
                            IngredientId = 7,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7239),
                            Description = "Crisp, leafy vegetable perfect for hotpot.",
                            ImageURL = "https://example.com/images/napa-cabbage.jpg",
                            IngredientTypeID = 3,
                            IsDelete = false,
                            MinStockLevel = 25,
                            Name = "Napa Cabbage",
                            Quantity = 100
                        },
                        new
                        {
                            IngredientId = 8,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7241),
                            Description = "Fresh spinach leaves, washed and ready to cook.",
                            ImageURL = "https://example.com/images/spinach.jpg",
                            IngredientTypeID = 3,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Spinach",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 9,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7242),
                            Description = "Sweet corn cut into bite-sized pieces.",
                            ImageURL = "https://example.com/images/corn.jpg",
                            IngredientTypeID = 3,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Corn",
                            Quantity = 70
                        },
                        new
                        {
                            IngredientId = 10,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7244),
                            Description = "Thick, chewy Japanese wheat noodles.",
                            ImageURL = "https://example.com/images/udon-noodles.jpg",
                            IngredientTypeID = 4,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Udon Noodles",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 11,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7245),
                            Description = "Transparent noodles made from mung bean starch.",
                            ImageURL = "https://example.com/images/glass-noodles.jpg",
                            IngredientTypeID = 4,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Glass Noodles",
                            Quantity = 85
                        },
                        new
                        {
                            IngredientId = 12,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7247),
                            Description = "Curly wheat noodles perfect for hotpot.",
                            ImageURL = "https://example.com/images/ramen-noodles.jpg",
                            IngredientTypeID = 4,
                            IsDelete = false,
                            MinStockLevel = 25,
                            Name = "Ramen Noodles",
                            Quantity = 90
                        },
                        new
                        {
                            IngredientId = 13,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7249),
                            Description = "Firm tofu cubes that hold their shape in hotpot.",
                            ImageURL = "https://example.com/images/firm-tofu.jpg",
                            IngredientTypeID = 5,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Firm Tofu",
                            Quantity = 60
                        },
                        new
                        {
                            IngredientId = 14,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7250),
                            Description = "Deep-fried tofu puffs that absorb broth flavors.",
                            ImageURL = "https://example.com/images/tofu-puffs.jpg",
                            IngredientTypeID = 5,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Tofu Puffs",
                            Quantity = 65
                        },
                        new
                        {
                            IngredientId = 15,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7252),
                            Description = "Flavorful shiitake mushrooms, fresh or dried.",
                            ImageURL = "https://example.com/images/shiitake.jpg",
                            IngredientTypeID = 6,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Shiitake Mushrooms",
                            Quantity = 70
                        },
                        new
                        {
                            IngredientId = 16,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7254),
                            Description = "Delicate, long-stemmed enoki mushrooms.",
                            ImageURL = "https://example.com/images/enoki.jpg",
                            IngredientTypeID = 6,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Enoki Mushrooms",
                            Quantity = 65
                        },
                        new
                        {
                            IngredientId = 17,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7255),
                            Description = "Traditional spicy broth with Sichuan peppercorns and chili oil.",
                            ImageURL = "https://example.com/images/sichuan-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Spicy Sichuan Broth",
                            Quantity = 50
                        },
                        new
                        {
                            IngredientId = 18,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7257),
                            Description = "Tangy tomato-based broth, slightly sweet and sour.",
                            ImageURL = "https://example.com/images/tomato-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Tomato Broth",
                            Quantity = 45
                        },
                        new
                        {
                            IngredientId = 19,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7259),
                            Description = "Rich umami broth made from various mushrooms.",
                            ImageURL = "https://example.com/images/mushroom-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Mushroom Broth",
                            Quantity = 40
                        },
                        new
                        {
                            IngredientId = 20,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7261),
                            Description = "Light, clear broth made from simmering bones for hours.",
                            ImageURL = "https://example.com/images/bone-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Clear Bone Broth",
                            Quantity = 55
                        },
                        new
                        {
                            IngredientId = 21,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7263),
                            Description = "Creamy sauce made from ground sesame seeds.",
                            ImageURL = "https://example.com/images/sesame-sauce.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Sesame Sauce",
                            Quantity = 40
                        },
                        new
                        {
                            IngredientId = 22,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7264),
                            Description = "Soy sauce infused with fresh minced garlic.",
                            ImageURL = "https://example.com/images/garlic-soy.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Garlic Soy Sauce",
                            Quantity = 45
                        },
                        new
                        {
                            IngredientId = 23,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7266),
                            Description = "Spicy oil made from infusing oil with chili peppers.",
                            ImageURL = "https://example.com/images/chili-oil.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Chili Oil",
                            Quantity = 50
                        },
                        new
                        {
                            IngredientId = 24,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7268),
                            Description = "Umami-rich sauce made from soybean oil, garlic, shallots, and dried seafood.",
                            ImageURL = "https://example.com/images/shacha-sauce.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Shacha Sauce",
                            Quantity = 35
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.Property<int>("IngredientPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientPriceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientPriceId");

                    b.HasIndex("IngredientID");

                    b.ToTable("IngredientPrices");

                    b.HasData(
                        new
                        {
                            IngredientPriceId = 1,
                            CreatedAt = new DateTime(2025, 1, 28, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7360),
                            EffectiveDate = new DateTime(2025, 1, 28, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7321),
                            IngredientID = 1,
                            IsDelete = false,
                            Price = 12.99m
                        },
                        new
                        {
                            IngredientPriceId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7362),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7361),
                            IngredientID = 1,
                            IsDelete = false,
                            Price = 13.99m
                        },
                        new
                        {
                            IngredientPriceId = 3,
                            CreatedAt = new DateTime(2025, 1, 28, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7364),
                            EffectiveDate = new DateTime(2025, 1, 28, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7364),
                            IngredientID = 2,
                            IsDelete = false,
                            Price = 14.99m
                        },
                        new
                        {
                            IngredientPriceId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7366),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7366),
                            IngredientID = 2,
                            IsDelete = false,
                            Price = 15.99m
                        },
                        new
                        {
                            IngredientPriceId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7368),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7368),
                            IngredientID = 3,
                            IsDelete = false,
                            Price = 11.99m
                        },
                        new
                        {
                            IngredientPriceId = 6,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7370),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7370),
                            IngredientID = 4,
                            IsDelete = false,
                            Price = 16.99m
                        },
                        new
                        {
                            IngredientPriceId = 7,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7372),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7371),
                            IngredientID = 5,
                            IsDelete = false,
                            Price = 9.99m
                        },
                        new
                        {
                            IngredientPriceId = 8,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7375),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7374),
                            IngredientID = 6,
                            IsDelete = false,
                            Price = 14.99m
                        },
                        new
                        {
                            IngredientPriceId = 9,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7377),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7376),
                            IngredientID = 7,
                            IsDelete = false,
                            Price = 5.99m
                        },
                        new
                        {
                            IngredientPriceId = 10,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7378),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7378),
                            IngredientID = 8,
                            IsDelete = false,
                            Price = 4.99m
                        },
                        new
                        {
                            IngredientPriceId = 11,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7380),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7380),
                            IngredientID = 9,
                            IsDelete = false,
                            Price = 3.99m
                        },
                        new
                        {
                            IngredientPriceId = 12,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7382),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7382),
                            IngredientID = 10,
                            IsDelete = false,
                            Price = 6.99m
                        },
                        new
                        {
                            IngredientPriceId = 13,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7384),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7383),
                            IngredientID = 11,
                            IsDelete = false,
                            Price = 5.99m
                        },
                        new
                        {
                            IngredientPriceId = 14,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7386),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7385),
                            IngredientID = 12,
                            IsDelete = false,
                            Price = 6.49m
                        },
                        new
                        {
                            IngredientPriceId = 15,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7387),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7387),
                            IngredientID = 13,
                            IsDelete = false,
                            Price = 4.99m
                        },
                        new
                        {
                            IngredientPriceId = 16,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7389),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7389),
                            IngredientID = 14,
                            IsDelete = false,
                            Price = 5.49m
                        },
                        new
                        {
                            IngredientPriceId = 17,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7391),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7390),
                            IngredientID = 15,
                            IsDelete = false,
                            Price = 7.99m
                        },
                        new
                        {
                            IngredientPriceId = 18,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7393),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7392),
                            IngredientID = 16,
                            IsDelete = false,
                            Price = 6.99m
                        },
                        new
                        {
                            IngredientPriceId = 19,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7433),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7432),
                            IngredientID = 17,
                            IsDelete = false,
                            Price = 8.99m
                        },
                        new
                        {
                            IngredientPriceId = 20,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7444),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7444),
                            IngredientID = 18,
                            IsDelete = false,
                            Price = 7.99m
                        },
                        new
                        {
                            IngredientPriceId = 21,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7446),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7445),
                            IngredientID = 19,
                            IsDelete = false,
                            Price = 8.49m
                        },
                        new
                        {
                            IngredientPriceId = 22,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7448),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7448),
                            IngredientID = 20,
                            IsDelete = false,
                            Price = 7.49m
                        },
                        new
                        {
                            IngredientPriceId = 23,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7450),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7449),
                            IngredientID = 21,
                            IsDelete = false,
                            Price = 4.99m
                        },
                        new
                        {
                            IngredientPriceId = 24,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7452),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7451),
                            IngredientID = 22,
                            IsDelete = false,
                            Price = 3.99m
                        },
                        new
                        {
                            IngredientPriceId = 25,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7454),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7453),
                            IngredientID = 23,
                            IsDelete = false,
                            Price = 4.49m
                        },
                        new
                        {
                            IngredientPriceId = 26,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7455),
                            EffectiveDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7455),
                            IngredientID = 24,
                            IsDelete = false,
                            Price = 5.99m
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Property<int>("IngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientTypeId");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            IngredientTypeId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7158),
                            IsDelete = false,
                            Name = "Meat"
                        },
                        new
                        {
                            IngredientTypeId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7160),
                            IsDelete = false,
                            Name = "Seafood"
                        },
                        new
                        {
                            IngredientTypeId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7171),
                            IsDelete = false,
                            Name = "Vegetables"
                        },
                        new
                        {
                            IngredientTypeId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7182),
                            IsDelete = false,
                            Name = "Noodles"
                        },
                        new
                        {
                            IngredientTypeId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7183),
                            IsDelete = false,
                            Name = "Tofu"
                        },
                        new
                        {
                            IngredientTypeId = 6,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7185),
                            IsDelete = false,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            IngredientTypeId = 7,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7186),
                            IsDelete = false,
                            Name = "Broths"
                        },
                        new
                        {
                            IngredientTypeId = 8,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(7187),
                            IsDelete = false,
                            Name = "Sauces"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ManagerId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6337),
                            IsDelete = false,
                            UserID = -2
                        },
                        new
                        {
                            ManagerId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6341),
                            IsDelete = false,
                            UserID = -3
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("DiscountID")
                        .IsUnique()
                        .HasFilter("[DiscountID] IS NOT NULL");

                    b.HasIndex("PaymentID")
                        .IsUnique()
                        .HasFilter("[PaymentID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("ComboID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomizationID")
                        .HasColumnType("int");

                    b.Property<int?>("HotpotID")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilID")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ComboID")
                        .IsUnique()
                        .HasFilter("[ComboID] IS NOT NULL");

                    b.HasIndex("CustomizationID")
                        .IsUnique()
                        .HasFilter("[CustomizationID] IS NOT NULL");

                    b.HasIndex("HotpotID")
                        .IsUnique()
                        .HasFilter("[HotpotID] IS NOT NULL");

                    b.HasIndex("IngredientID")
                        .IsUnique()
                        .HasFilter("[IngredientID] IS NOT NULL");

                    b.HasIndex("OrderID");

                    b.HasIndex("UtensilID")
                        .IsUnique()
                        .HasFilter("[UtensilID] IS NOT NULL");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 247, DateTimeKind.Utc).AddTicks(1278),
                            IsDelete = false,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 247, DateTimeKind.Utc).AddTicks(1284),
                            IsDelete = false,
                            Name = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 247, DateTimeKind.Utc).AddTicks(1285),
                            IsDelete = false,
                            Name = "Staff"
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 247, DateTimeKind.Utc).AddTicks(1286),
                            IsDelete = false,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.Property<int>("ShippingOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingOrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ShippingOrderId");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("StaffID");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6273),
                            IsDelete = false,
                            UserID = -4
                        },
                        new
                        {
                            StaffId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6280),
                            IsDelete = false,
                            UserID = -5
                        },
                        new
                        {
                            StaffId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6281),
                            IsDelete = false,
                            UserID = -6
                        },
                        new
                        {
                            StaffId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6282),
                            IsDelete = false,
                            UserID = -7
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Property<int>("TurtorialVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurtorialVideoId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("TurtorialVideoId");

                    b.ToTable("TurtorialVideos");

                    b.HasData(
                        new
                        {
                            TurtorialVideoId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6562),
                            Description = "A comprehensive guide to setting up and using a traditional hotpot.",
                            IsDelete = false,
                            Name = "How to Use Traditional Hotpot",
                            VideoURL = "https://www.youtube.com/watch?v=traditional-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6564),
                            Description = "Learn how to safely set up and use your electric hotpot.",
                            IsDelete = false,
                            Name = "Electric Hotpot Setup Guide",
                            VideoURL = "https://www.youtube.com/watch?v=electric-hotpot-setup"
                        },
                        new
                        {
                            TurtorialVideoId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6566),
                            Description = "Tips and tricks for using your portable hotpot anywhere.",
                            IsDelete = false,
                            Name = "Portable Hotpot on the Go",
                            VideoURL = "https://www.youtube.com/watch?v=portable-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6567),
                            Description = "How to effectively use all compartments in your multi-section hotpot.",
                            IsDelete = false,
                            Name = "Multi-compartment Hotpot Mastery",
                            VideoURL = "https://www.youtube.com/watch?v=multi-compartment-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6568),
                            Description = "Learn how to properly care for and maintain your ceramic hotpot.",
                            IsDelete = false,
                            Name = "Ceramic Hotpot Care Guide",
                            VideoURL = "https://www.youtube.com/watch?v=ceramic-hotpot-care"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = -1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 247, DateTimeKind.Utc).AddTicks(1508),
                            Email = "Admin@gmail.com",
                            IsDelete = false,
                            Name = "Admin",
                            Password = "$2a$12$nk4sjPpaI5KiqqJpKmDT5eo8SFXFF3we6Qc/CG1R3NYNgB5RO92Za",
                            RoleID = 1
                        },
                        new
                        {
                            UserId = -2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 484, DateTimeKind.Utc).AddTicks(8180),
                            Email = "Manager1@gmail.com",
                            IsDelete = false,
                            Name = "Manager1",
                            Password = "$2a$12$ZTqPUTRT4SIhNluSnqhDIuk/SEIkYbia54AO9.8wdcXIxseW4W.02",
                            RoleID = 2
                        },
                        new
                        {
                            UserId = -3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 719, DateTimeKind.Utc).AddTicks(3582),
                            Email = "Manager2@gmail.com",
                            IsDelete = false,
                            Name = "Manager2",
                            Password = "$2a$12$YlBkdFQ036.drl5qL92ycOJyW9AcqWBOGd215Qyp3v.q6gsngtVFy",
                            RoleID = 2
                        },
                        new
                        {
                            UserId = -4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 30, 949, DateTimeKind.Utc).AddTicks(8832),
                            Email = "Staff1@gmail.com",
                            IsDelete = false,
                            Name = "Staff1",
                            Password = "$2a$12$XXG.GWK9Myx7Fjp0IiclL.pRoJHZ1G9MV1UZ/bsCptb1WFJpGW3c6",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = -5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 31, 183, DateTimeKind.Utc).AddTicks(7386),
                            Email = "Staff2@gmail.com",
                            IsDelete = false,
                            Name = "Staff2",
                            Password = "$2a$12$dRT3KW0bJsJJGJdzxRuXn.DVsApbW48qPMpq6ME.RcGAdDZOSlBO6",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = -6,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 31, 413, DateTimeKind.Utc).AddTicks(5418),
                            Email = "Staff3@gmail.com",
                            IsDelete = false,
                            Name = "Staff3",
                            Password = "$2a$12$TaTG8RpDsVuUutGCmxLVYeyWv7hPH8YCAe2M7tQdhEiNqdHXcUqDy",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = -7,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 31, 643, DateTimeKind.Utc).AddTicks(1082),
                            Email = "Staff4@gmail.com",
                            IsDelete = false,
                            Name = "Staff4",
                            Password = "$2a$12$MmNvT8zxjDc6YuIxcIh3OOxtmm8HAweXw1d9MAFFiy7bKaCvq/fQm",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = -8,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 31, 873, DateTimeKind.Utc).AddTicks(2468),
                            Email = "Customer1@gmail.com",
                            IsDelete = false,
                            Name = "Customer1",
                            Password = "$2a$12$qa8YUolS1Q5oVjLOx816aOHg5scf/fqvb1ywMlEkr1KUfiprvTiBy",
                            RoleID = 4
                        },
                        new
                        {
                            UserId = -9,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 103, DateTimeKind.Utc).AddTicks(6419),
                            Email = "Customer2@gmail.com",
                            IsDelete = false,
                            Name = "Customer2",
                            Password = "$2a$12$3Wwe3r3XPmLNSBFdXSxS1eh2ptkFpR8ebp09PSGWByOtrNzT0Vlni",
                            RoleID = 4
                        },
                        new
                        {
                            UserId = -10,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 333, DateTimeKind.Utc).AddTicks(9348),
                            Email = "Customer3@gmail.com",
                            IsDelete = false,
                            Name = "Customer3",
                            Password = "$2a$12$Sn7e24yA01kXWdG1YrafzOFmksAx8OpndGi9foqvSlmm3YeUyKZEu",
                            RoleID = 4
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Property<int>("UtensilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UtensilTypeID")
                        .HasColumnType("int");

                    b.HasKey("UtensilId");

                    b.HasIndex("UtensilTypeID");

                    b.ToTable("Utensils");

                    b.HasData(
                        new
                        {
                            UtensilId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6886),
                            Description = "Set of 5 pairs of traditional bamboo chopsticks.",
                            ImageURL = "https://example.com/images/bamboo-chopsticks.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6881),
                            Material = "Bamboo",
                            Name = "Bamboo Chopsticks Set",
                            Price = 12.99m,
                            Quantity = 100,
                            Status = true,
                            UtensilTypeID = 1
                        },
                        new
                        {
                            UtensilId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6889),
                            Description = "Durable stainless steel ladle for serving hotpot broth.",
                            ImageURL = "https://example.com/images/steel-ladle.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6887),
                            Material = "Stainless Steel",
                            Name = "Stainless Steel Hotpot Ladle",
                            Price = 9.99m,
                            Quantity = 75,
                            Status = true,
                            UtensilTypeID = 2
                        },
                        new
                        {
                            UtensilId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6892),
                            Description = "Fine mesh strainer for retrieving food from the hotpot.",
                            ImageURL = "https://example.com/images/mesh-strainer.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6890),
                            Material = "Stainless Steel",
                            Name = "Wire Mesh Strainer",
                            Price = 7.99m,
                            Quantity = 80,
                            Status = true,
                            UtensilTypeID = 3
                        },
                        new
                        {
                            UtensilId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6894),
                            Description = "Set of 4 ceramic bowls for individual servings.",
                            ImageURL = "https://example.com/images/ceramic-bowls.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6893),
                            Material = "Ceramic",
                            Name = "Ceramic Serving Bowl Set",
                            Price = 19.99m,
                            Quantity = 50,
                            Status = true,
                            UtensilTypeID = 4
                        },
                        new
                        {
                            UtensilId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6897),
                            Description = "Set of 6 durable melamine plates for hotpot dining.",
                            ImageURL = "https://example.com/images/melamine-plates.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Utc).AddTicks(6896),
                            Material = "Melamine",
                            Name = "Melamine Plates",
                            Price = 24.99m,
                            Quantity = 60,
                            Status = true,
                            UtensilTypeID = 5
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Property<int>("UtensilTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UtensilTypeId");

                    b.ToTable("UtensilTypes");

                    b.HasData(
                        new
                        {
                            UtensilTypeId = 1,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6483),
                            IsDelete = false,
                            Name = "Chopsticks"
                        },
                        new
                        {
                            UtensilTypeId = 2,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6512),
                            IsDelete = false,
                            Name = "Ladles"
                        },
                        new
                        {
                            UtensilTypeId = 3,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6514),
                            IsDelete = false,
                            Name = "Strainers"
                        },
                        new
                        {
                            UtensilTypeId = 4,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6515),
                            IsDelete = false,
                            Name = "Bowls"
                        },
                        new
                        {
                            UtensilTypeId = 5,
                            CreatedAt = new DateTime(2025, 2, 27, 19, 49, 32, 564, DateTimeKind.Local).AddTicks(6516),
                            IsDelete = false,
                            Name = "Plates"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShiftTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManagerID");

                    b.HasIndex("StaffID");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.ChatSession", "Session")
                        .WithMany()
                        .HasForeignKey("SessionChatSessionId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.ChatSession", null)
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "HotpotBroth")
                        .WithMany()
                        .HasForeignKey("HotpotBrothID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", null)
                        .WithMany("CombosAsBroth")
                        .HasForeignKey("IngredientId");

                    b.Navigation("HotpotBroth");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("ComboID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ConditionLog", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotPotInventory")
                        .WithMany("ConditionLogs")
                        .HasForeignKey("HotPotInventoryId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithMany()
                        .HasForeignKey("UtensilID");

                    b.Navigation("HotPotInventory");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customer", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Customer", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithOne("Customization")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Customization", "ComboID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "HotpotBroth")
                        .WithMany()
                        .HasForeignKey("HotpotBrothID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", null)
                        .WithMany("CustomizationsAsBroth")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Customizations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("HotpotBroth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("CustomizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customization");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Feedback", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Feedback", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Hotpot", "Hotpot")
                        .WithMany("InventoryUnits")
                        .HasForeignKey("HotpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotpot");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotpotType", "HotpotType")
                        .WithMany("Hotpot")
                        .HasForeignKey("HotpotTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", "TurtorialVideo")
                        .WithMany("Hotpot")
                        .HasForeignKey("TurtorialVideoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HotpotType");

                    b.Navigation("TurtorialVideo");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientType", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientPrices")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Manager", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Manager", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Discount", "Discount")
                        .WithOne("Order")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Order", "DiscountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Payment", "Payment")
                        .WithOne("Order")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Order", "PaymentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.OrderDetail", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "ComboID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "CustomizationID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Hotpot", "Hotpot")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "HotpotID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "IngredientID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "UtensilID");

                    b.Navigation("Combo");

                    b.Navigation("Customization");

                    b.Navigation("Hotpot");

                    b.Navigation("Ingredient");

                    b.Navigation("Order");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("ShippingOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Staff", "Staff")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Staff", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Staff", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.UtensilType", "UtensilType")
                        .WithMany("Utensils")
                        .HasForeignKey("UtensilTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UtensilType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.WorkShift", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Manager", "Manager")
                        .WithMany("WorkShifts")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Staff", "Staff")
                        .WithMany("WorkShifts")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Navigation("ComboIngredients");

                    b.Navigation("Customization");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Navigation("CustomizationIngredients");

                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Navigation("ConditionLogs");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Navigation("InventoryUnits");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotpotType", b =>
                {
                    b.Navigation("Hotpot");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Navigation("ComboIngredients");

                    b.Navigation("CombosAsBroth");

                    b.Navigation("CustomizationIngredients");

                    b.Navigation("CustomizationsAsBroth");

                    b.Navigation("IngredientPrices");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Manager", b =>
                {
                    b.Navigation("WorkShifts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("OrderDetails");

                    b.Navigation("ShippingOrder");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Staff", b =>
                {
                    b.Navigation("ShippingOrders");

                    b.Navigation("WorkShifts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Navigation("Hotpot");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Customizations");

                    b.Navigation("Feedbacks");

                    b.Navigation("Manager");

                    b.Navigation("Orders");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Navigation("Utensils");
                });
#pragma warning restore 612, 618
        }
    }
}
