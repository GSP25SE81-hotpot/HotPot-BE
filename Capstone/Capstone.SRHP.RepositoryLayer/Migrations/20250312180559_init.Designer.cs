// <auto-generated />
using System;
using Capstone.HPTY.RepositoryLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.HPTY.RepositoryLayer.Migrations
{
    [DbContext(typeof(HPTYContext))]
    [Migration("20250312180559_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMessageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("SessionId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Property<int>("ChatSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatSessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatSessionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboId"));

                    b.Property<int?>("AppliedDiscountID")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HotpotBrothID")
                        .HasColumnType("int")
                        .HasColumnName("HotpotBrothID");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCustomizable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TurtorialVideoID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboId");

                    b.HasIndex("AppliedDiscountID");

                    b.HasIndex("HotpotBrothID");

                    b.HasIndex("IngredientId");

                    b.HasIndex("TurtorialVideoID");

                    b.ToTable("Combos", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboAllowedIngredientType", b =>
                {
                    b.Property<int>("ComboAllowedIngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboAllowedIngredientTypeId"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboAllowedIngredientTypeId");

                    b.HasIndex("ComboId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("ComboAllowedIngredientTypes");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.Property<int>("ComboIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboIngredientId"));

                    b.Property<int>("ComboID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboIngredientId");

                    b.HasIndex("IngredientID");

                    b.HasIndex("ComboID", "IngredientID");

                    b.ToTable("ComboIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ConditionLog", b =>
                {
                    b.Property<int>("ConditionLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionLogId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("HotPotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoggedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilID")
                        .HasColumnType("int");

                    b.HasKey("ConditionLogId");

                    b.HasIndex("HotPotInventoryId");

                    b.HasIndex("UtensilID");

                    b.ToTable("ConditionLogs");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("LoyatyPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5205),
                            IsDelete = false,
                            LoyatyPoint = 0.0,
                            UserID = 8
                        },
                        new
                        {
                            CustomerId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5209),
                            IsDelete = false,
                            LoyatyPoint = 0.0,
                            UserID = 9
                        },
                        new
                        {
                            CustomerId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5209),
                            IsDelete = false,
                            LoyatyPoint = 200.0,
                            UserID = 10
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Property<int>("CustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationId"));

                    b.Property<int?>("AppliedDiscountID")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ComboID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotpotBrothID")
                        .HasColumnType("int")
                        .HasColumnName("HotpotBrothID");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomizationId");

                    b.HasIndex("AppliedDiscountID");

                    b.HasIndex("ComboID")
                        .IsUnique();

                    b.HasIndex("HotpotBrothID");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserID");

                    b.ToTable("Customizations", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.Property<int>("CustomizationIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationIngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomizationID")
                        .HasColumnType("int");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomizationIngredientId");

                    b.HasIndex("IngredientID");

                    b.HasIndex("CustomizationID", "IngredientID");

                    b.ToTable("CustomizationIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("PointCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Property<int>("HotPotInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotPotInventoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotpotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SeriesNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotPotInventoryId");

                    b.HasIndex("HotpotId");

                    b.HasIndex("SeriesNumber")
                        .IsUnique();

                    b.ToTable("HotPotInventorys");

                    b.HasData(
                        new
                        {
                            HotPotInventoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5703),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5705),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0002",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5706),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5707),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0002",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5709),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 6,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5710),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0001",
                            Status = false
                        },
                        new
                        {
                            HotPotInventoryId = 7,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5711),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0001",
                            Status = false
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Property<int>("HotpotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotpotId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotpotId");

                    b.ToTable("Hotpots");

                    b.HasData(
                        new
                        {
                            HotpotId = 1,
                            BasePrice = 89.99m,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5586),
                            Description = "Traditional copper hotpot with charcoal heating.",
                            ImageURL = "https://example.com/images/classic-copper-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Copper",
                            Name = "Classic Copper Hotpot",
                            Price = 29.99m,
                            Quantity = 25,
                            Size = "m",
                            Status = true
                        },
                        new
                        {
                            HotpotId = 2,
                            BasePrice = 129.99m,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5590),
                            Description = "Electric hotpot with temperature control and non-stick coating.",
                            ImageURL = "https://example.com/images/modern-electric-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Stainless Steel",
                            Name = "Modern Electric Hotpot",
                            Price = 59.99m,
                            Quantity = 30,
                            Size = "L",
                            Status = true
                        },
                        new
                        {
                            HotpotId = 3,
                            BasePrice = 69.99m,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5592),
                            Description = "Compact portable hotpot perfect for travel or small gatherings.",
                            ImageURL = "https://example.com/images/mini-portable-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Aluminum",
                            Name = "Mini Portable Hotpot",
                            Price = 19.99m,
                            Quantity = 40,
                            Size = "S",
                            Status = true
                        },
                        new
                        {
                            HotpotId = 4,
                            BasePrice = 149.99m,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5594),
                            Description = "Multi-compartment hotpot for different broths in one pot.",
                            ImageURL = "https://example.com/images/dual-section-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Stainless Steel",
                            Name = "Dual Section Hotpot",
                            Price = 69.99m,
                            Quantity = 20,
                            Size = "L",
                            Status = true
                        },
                        new
                        {
                            HotpotId = 5,
                            BasePrice = 79.99m,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5596),
                            Description = "Authentic ceramic hotpot that retains heat exceptionally well.",
                            ImageURL = "https://example.com/images/traditional-ceramic-hotpot.jpg",
                            InventoryID = 0,
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Ceramic",
                            Name = "Traditional Ceramic Hotpot",
                            Price = 39.99m,
                            Quantity = 15,
                            Size = "M",
                            Status = true
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IngredientTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientId");

                    b.HasIndex("IngredientTypeID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5822),
                            Description = "Thinly sliced premium beef perfect for hotpot.",
                            ImageURL = "https://example.com/images/sliced-beef.jpg",
                            IngredientTypeID = 1,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Sliced Beef",
                            Quantity = 100
                        },
                        new
                        {
                            IngredientId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5825),
                            Description = "Tender sliced lamb meat, perfect for quick cooking.",
                            ImageURL = "https://example.com/images/lamb-slices.jpg",
                            IngredientTypeID = 1,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Lamb Slices",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5826),
                            Description = "Thinly sliced pork belly with perfect fat-to-meat ratio.",
                            ImageURL = "https://example.com/images/pork-belly.jpg",
                            IngredientTypeID = 1,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Pork Belly",
                            Quantity = 75
                        },
                        new
                        {
                            IngredientId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5829),
                            Description = "Fresh, peeled and deveined shrimp.",
                            ImageURL = "https://example.com/images/shrimp.jpg",
                            IngredientTypeID = 2,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Shrimp",
                            Quantity = 90
                        },
                        new
                        {
                            IngredientId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5830),
                            Description = "Bouncy fish balls made from fresh fish paste.",
                            ImageURL = "https://example.com/images/fish-balls.jpg",
                            IngredientTypeID = 2,
                            IsDelete = false,
                            MinStockLevel = 30,
                            Name = "Fish Balls",
                            Quantity = 120
                        },
                        new
                        {
                            IngredientId = 6,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5832),
                            Description = "Fresh squid sliced into rings.",
                            ImageURL = "https://example.com/images/squid.jpg",
                            IngredientTypeID = 2,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Squid",
                            Quantity = 60
                        },
                        new
                        {
                            IngredientId = 7,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5834),
                            Description = "Crisp, leafy vegetable perfect for hotpot.",
                            ImageURL = "https://example.com/images/napa-cabbage.jpg",
                            IngredientTypeID = 3,
                            IsDelete = false,
                            MinStockLevel = 25,
                            Name = "Napa Cabbage",
                            Quantity = 100
                        },
                        new
                        {
                            IngredientId = 8,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5836),
                            Description = "Fresh spinach leaves, washed and ready to cook.",
                            ImageURL = "https://example.com/images/spinach.jpg",
                            IngredientTypeID = 3,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Spinach",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 9,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5837),
                            Description = "Sweet corn cut into bite-sized pieces.",
                            ImageURL = "https://example.com/images/corn.jpg",
                            IngredientTypeID = 3,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Corn",
                            Quantity = 70
                        },
                        new
                        {
                            IngredientId = 10,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5839),
                            Description = "Thick, chewy Japanese wheat noodles.",
                            ImageURL = "https://example.com/images/udon-noodles.jpg",
                            IngredientTypeID = 4,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Udon Noodles",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 11,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5841),
                            Description = "Transparent noodles made from mung bean starch.",
                            ImageURL = "https://example.com/images/glass-noodles.jpg",
                            IngredientTypeID = 4,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Glass Noodles",
                            Quantity = 85
                        },
                        new
                        {
                            IngredientId = 12,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5842),
                            Description = "Curly wheat noodles perfect for hotpot.",
                            ImageURL = "https://example.com/images/ramen-noodles.jpg",
                            IngredientTypeID = 4,
                            IsDelete = false,
                            MinStockLevel = 25,
                            Name = "Ramen Noodles",
                            Quantity = 90
                        },
                        new
                        {
                            IngredientId = 13,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5844),
                            Description = "Firm tofu cubes that hold their shape in hotpot.",
                            ImageURL = "https://example.com/images/firm-tofu.jpg",
                            IngredientTypeID = 5,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Firm Tofu",
                            Quantity = 60
                        },
                        new
                        {
                            IngredientId = 14,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5846),
                            Description = "Deep-fried tofu puffs that absorb broth flavors.",
                            ImageURL = "https://example.com/images/tofu-puffs.jpg",
                            IngredientTypeID = 5,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Tofu Puffs",
                            Quantity = 65
                        },
                        new
                        {
                            IngredientId = 15,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5847),
                            Description = "Flavorful shiitake mushrooms, fresh or dried.",
                            ImageURL = "https://example.com/images/shiitake.jpg",
                            IngredientTypeID = 6,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Shiitake Mushrooms",
                            Quantity = 70
                        },
                        new
                        {
                            IngredientId = 16,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5849),
                            Description = "Delicate, long-stemmed enoki mushrooms.",
                            ImageURL = "https://example.com/images/enoki.jpg",
                            IngredientTypeID = 6,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Enoki Mushrooms",
                            Quantity = 65
                        },
                        new
                        {
                            IngredientId = 17,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5851),
                            Description = "Traditional spicy broth with Sichuan peppercorns and chili oil.",
                            ImageURL = "https://example.com/images/sichuan-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Spicy Sichuan Broth",
                            Quantity = 50
                        },
                        new
                        {
                            IngredientId = 18,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5902),
                            Description = "Tangy tomato-based broth, slightly sweet and sour.",
                            ImageURL = "https://example.com/images/tomato-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Tomato Broth",
                            Quantity = 45
                        },
                        new
                        {
                            IngredientId = 19,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5904),
                            Description = "Rich umami broth made from various mushrooms.",
                            ImageURL = "https://example.com/images/mushroom-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Mushroom Broth",
                            Quantity = 40
                        },
                        new
                        {
                            IngredientId = 20,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5906),
                            Description = "Light, clear broth made from simmering bones for hours.",
                            ImageURL = "https://example.com/images/bone-broth.jpg",
                            IngredientTypeID = 7,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Clear Bone Broth",
                            Quantity = 55
                        },
                        new
                        {
                            IngredientId = 21,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5908),
                            Description = "Creamy sauce made from ground sesame seeds.",
                            ImageURL = "https://example.com/images/sesame-sauce.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Sesame Sauce",
                            Quantity = 40
                        },
                        new
                        {
                            IngredientId = 22,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5909),
                            Description = "Soy sauce infused with fresh minced garlic.",
                            ImageURL = "https://example.com/images/garlic-soy.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Garlic Soy Sauce",
                            Quantity = 45
                        },
                        new
                        {
                            IngredientId = 23,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5911),
                            Description = "Spicy oil made from infusing oil with chili peppers.",
                            ImageURL = "https://example.com/images/chili-oil.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Chili Oil",
                            Quantity = 50
                        },
                        new
                        {
                            IngredientId = 24,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5913),
                            Description = "Umami-rich sauce made from soybean oil, garlic, shallots, and dried seafood.",
                            ImageURL = "https://example.com/images/shacha-sauce.jpg",
                            IngredientTypeID = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Shacha Sauce",
                            Quantity = 35
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.Property<int>("IngredientPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientPriceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientPriceId");

                    b.HasIndex("IngredientID");

                    b.ToTable("IngredientPrices");

                    b.HasData(
                        new
                        {
                            IngredientPriceId = 1,
                            CreatedAt = new DateTime(2025, 2, 11, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5972),
                            EffectiveDate = new DateTime(2025, 2, 11, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5962),
                            IngredientID = 1,
                            IsDelete = false,
                            Price = 12.99m
                        },
                        new
                        {
                            IngredientPriceId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5975),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5974),
                            IngredientID = 1,
                            IsDelete = false,
                            Price = 13.99m
                        },
                        new
                        {
                            IngredientPriceId = 3,
                            CreatedAt = new DateTime(2025, 2, 11, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5977),
                            EffectiveDate = new DateTime(2025, 2, 11, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5976),
                            IngredientID = 2,
                            IsDelete = false,
                            Price = 14.99m
                        },
                        new
                        {
                            IngredientPriceId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5979),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5978),
                            IngredientID = 2,
                            IsDelete = false,
                            Price = 15.99m
                        },
                        new
                        {
                            IngredientPriceId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5981),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5980),
                            IngredientID = 3,
                            IsDelete = false,
                            Price = 11.99m
                        },
                        new
                        {
                            IngredientPriceId = 6,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5983),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5982),
                            IngredientID = 4,
                            IsDelete = false,
                            Price = 16.99m
                        },
                        new
                        {
                            IngredientPriceId = 7,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5986),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5986),
                            IngredientID = 5,
                            IsDelete = false,
                            Price = 9.99m
                        },
                        new
                        {
                            IngredientPriceId = 8,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5988),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5987),
                            IngredientID = 6,
                            IsDelete = false,
                            Price = 14.99m
                        },
                        new
                        {
                            IngredientPriceId = 9,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5990),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5989),
                            IngredientID = 7,
                            IsDelete = false,
                            Price = 5.99m
                        },
                        new
                        {
                            IngredientPriceId = 10,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5992),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5991),
                            IngredientID = 8,
                            IsDelete = false,
                            Price = 4.99m
                        },
                        new
                        {
                            IngredientPriceId = 11,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5994),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5993),
                            IngredientID = 9,
                            IsDelete = false,
                            Price = 3.99m
                        },
                        new
                        {
                            IngredientPriceId = 12,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5996),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5995),
                            IngredientID = 10,
                            IsDelete = false,
                            Price = 6.99m
                        },
                        new
                        {
                            IngredientPriceId = 13,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5997),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5997),
                            IngredientID = 11,
                            IsDelete = false,
                            Price = 5.99m
                        },
                        new
                        {
                            IngredientPriceId = 14,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5999),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5999),
                            IngredientID = 12,
                            IsDelete = false,
                            Price = 6.49m
                        },
                        new
                        {
                            IngredientPriceId = 15,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6010),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6010),
                            IngredientID = 13,
                            IsDelete = false,
                            Price = 4.99m
                        },
                        new
                        {
                            IngredientPriceId = 16,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6012),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6012),
                            IngredientID = 14,
                            IsDelete = false,
                            Price = 5.49m
                        },
                        new
                        {
                            IngredientPriceId = 17,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6014),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6014),
                            IngredientID = 15,
                            IsDelete = false,
                            Price = 7.99m
                        },
                        new
                        {
                            IngredientPriceId = 18,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6016),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6016),
                            IngredientID = 16,
                            IsDelete = false,
                            Price = 6.99m
                        },
                        new
                        {
                            IngredientPriceId = 19,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6018),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6017),
                            IngredientID = 17,
                            IsDelete = false,
                            Price = 8.99m
                        },
                        new
                        {
                            IngredientPriceId = 20,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6021),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6020),
                            IngredientID = 18,
                            IsDelete = false,
                            Price = 7.99m
                        },
                        new
                        {
                            IngredientPriceId = 21,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6022),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6022),
                            IngredientID = 19,
                            IsDelete = false,
                            Price = 8.49m
                        },
                        new
                        {
                            IngredientPriceId = 22,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6024),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6024),
                            IngredientID = 20,
                            IsDelete = false,
                            Price = 7.49m
                        },
                        new
                        {
                            IngredientPriceId = 23,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6028),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6027),
                            IngredientID = 21,
                            IsDelete = false,
                            Price = 4.99m
                        },
                        new
                        {
                            IngredientPriceId = 24,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6030),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6029),
                            IngredientID = 22,
                            IsDelete = false,
                            Price = 3.99m
                        },
                        new
                        {
                            IngredientPriceId = 25,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6031),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6031),
                            IngredientID = 23,
                            IsDelete = false,
                            Price = 4.49m
                        },
                        new
                        {
                            IngredientPriceId = 26,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6033),
                            EffectiveDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(6033),
                            IngredientID = 24,
                            IsDelete = false,
                            Price = 5.99m
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Property<int>("IngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientTypeId");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            IngredientTypeId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5753),
                            IsDelete = false,
                            Name = "Broth"
                        },
                        new
                        {
                            IngredientTypeId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5754),
                            IsDelete = false,
                            Name = "Seafood"
                        },
                        new
                        {
                            IngredientTypeId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5760),
                            IsDelete = false,
                            Name = "Vegetables"
                        },
                        new
                        {
                            IngredientTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5772),
                            IsDelete = false,
                            Name = "Noodles"
                        },
                        new
                        {
                            IngredientTypeId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5774),
                            IsDelete = false,
                            Name = "Tofu"
                        },
                        new
                        {
                            IngredientTypeId = 6,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5775),
                            IsDelete = false,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            IngredientTypeId = 7,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5776),
                            IsDelete = false,
                            Name = "Meats"
                        },
                        new
                        {
                            IngredientTypeId = 8,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5777),
                            IsDelete = false,
                            Name = "Sauces"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkDays")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ManagerId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5159),
                            IsDelete = false,
                            UserID = 2,
                            WorkDays = 0
                        },
                        new
                        {
                            ManagerId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5162),
                            IsDelete = false,
                            UserID = 3,
                            WorkDays = 0
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<decimal?>("HotpotDeposit")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IngredientsDeposit")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("DiscountID")
                        .IsUnique()
                        .HasFilter("[DiscountID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("ComboID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomizationID")
                        .HasColumnType("int");

                    b.Property<int?>("HotpotID")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilID")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ComboID")
                        .IsUnique()
                        .HasFilter("[ComboID] IS NOT NULL");

                    b.HasIndex("CustomizationID")
                        .IsUnique()
                        .HasFilter("[CustomizationID] IS NOT NULL");

                    b.HasIndex("HotpotID")
                        .IsUnique()
                        .HasFilter("[HotpotID] IS NOT NULL");

                    b.HasIndex("IngredientID")
                        .IsUnique()
                        .HasFilter("[IngredientID] IS NOT NULL");

                    b.HasIndex("OrderID");

                    b.HasIndex("UtensilID")
                        .IsUnique()
                        .HasFilter("[UtensilID] IS NOT NULL");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionCode")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderID")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ReplacementRequest", b =>
                {
                    b.Property<int>("ReplacementRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplacementRequestId"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AssignedStaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ConditionLogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int?>("HotPotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilId")
                        .HasColumnType("int");

                    b.HasKey("ReplacementRequestId");

                    b.HasIndex("AssignedStaffId");

                    b.HasIndex("ConditionLogId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HotPotInventoryId");

                    b.HasIndex("UtensilId");

                    b.ToTable("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 55, 890, DateTimeKind.Utc).AddTicks(8587),
                            IsDelete = false,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 55, 890, DateTimeKind.Utc).AddTicks(8593),
                            IsDelete = false,
                            Name = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 55, 890, DateTimeKind.Utc).AddTicks(8594),
                            IsDelete = false,
                            Name = "Staff"
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 55, 890, DateTimeKind.Utc).AddTicks(8595),
                            IsDelete = false,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.Property<int>("ShippingOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingOrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProofImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProofImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProofTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("SignatureData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ShippingOrderId");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("StaffID");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", b =>
                {
                    b.Property<int>("SizeDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeDiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SizeDiscountId");

                    b.ToTable("SizeDiscounts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkDays")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5037),
                            IsDelete = false,
                            UserID = 4,
                            WorkDays = 0
                        },
                        new
                        {
                            StaffId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5048),
                            IsDelete = false,
                            UserID = 5,
                            WorkDays = 0
                        },
                        new
                        {
                            StaffId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5049),
                            IsDelete = false,
                            UserID = 6,
                            WorkDays = 0
                        },
                        new
                        {
                            StaffId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5050),
                            IsDelete = false,
                            UserID = 7,
                            WorkDays = 0
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Property<int>("TurtorialVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurtorialVideoId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("TurtorialVideoId");

                    b.ToTable("TurtorialVideos");

                    b.HasData(
                        new
                        {
                            TurtorialVideoId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5505),
                            Description = "A comprehensive guide to setting up and using a traditional hotpot.",
                            IsDelete = false,
                            Name = "How to Use Traditional Hotpot",
                            VideoURL = "https://www.youtube.com/watch?v=traditional-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5526),
                            Description = "Learn how to safely set up and use your electric hotpot.",
                            IsDelete = false,
                            Name = "Electric Hotpot Setup Guide",
                            VideoURL = "https://www.youtube.com/watch?v=electric-hotpot-setup"
                        },
                        new
                        {
                            TurtorialVideoId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5528),
                            Description = "Tips and tricks for using your portable hotpot anywhere.",
                            IsDelete = false,
                            Name = "Portable Hotpot on the Go",
                            VideoURL = "https://www.youtube.com/watch?v=portable-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5529),
                            Description = "How to effectively use all compartments in your multi-section hotpot.",
                            IsDelete = false,
                            Name = "Multi-compartment Hotpot Mastery",
                            VideoURL = "https://www.youtube.com/watch?v=multi-compartment-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5531),
                            Description = "Learn how to properly care for and maintain your ceramic hotpot.",
                            IsDelete = false,
                            Name = "Ceramic Hotpot Care Guide",
                            VideoURL = "https://www.youtube.com/watch?v=ceramic-hotpot-care"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 55, 890, DateTimeKind.Utc).AddTicks(8912),
                            Email = "Admin@gmail.com",
                            IsDelete = false,
                            Name = "Admin",
                            Password = "$2a$12$TOQFfztyZEznHiHlWQOCuOkEeJBd2nTAziVP5SxOrspr1V/IJpPxK",
                            PhoneNumber = "987654321",
                            RoleID = 1
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 56, 207, DateTimeKind.Utc).AddTicks(188),
                            Email = "Manager1@gmail.com",
                            IsDelete = false,
                            Name = "Manager1",
                            Password = "$2a$12$cmMhm02EMMg/1kGPCLkwYuFhTBsPjEz6YiPrmNFH.SEjG0se2Lllm",
                            PhoneNumber = "999999999",
                            RoleID = 2
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 56, 518, DateTimeKind.Utc).AddTicks(5492),
                            Email = "Manager2@gmail.com",
                            IsDelete = false,
                            Name = "Manager2",
                            Password = "$2a$12$hfdF0.ET/w7nZsu/jKDP5eCX4YoYfVZ3pmJx.r5502/ZpK2Tco4iC",
                            PhoneNumber = "888888888",
                            RoleID = 2
                        },
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 56, 821, DateTimeKind.Utc).AddTicks(2954),
                            Email = "Staff1@gmail.com",
                            IsDelete = false,
                            Name = "Staff1",
                            Password = "$2a$12$v3fCX5oJP.ZQA4ZZRPYyOuQCIfVcgLxjfp5YHzTyLkqI1ie0ZN1jq",
                            PhoneNumber = "777777777",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 57, 88, DateTimeKind.Utc).AddTicks(9602),
                            Email = "Staff2@gmail.com",
                            IsDelete = false,
                            Name = "Staff2",
                            Password = "$2a$12$R72VCO169K/eMSVptud42e5vJY7EWiC0ZX4DnGWu/gZEOpig28xIK",
                            PhoneNumber = "666666666",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = 6,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 57, 351, DateTimeKind.Utc).AddTicks(6356),
                            Email = "Staff3@gmail.com",
                            IsDelete = false,
                            Name = "Staff3",
                            Password = "$2a$12$fn2AH2kVaLLZGcNMrVjQ7O.mTmRPL.AEwBOFIHjZN3EBy//s46L9m",
                            PhoneNumber = "555555555",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = 7,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 57, 617, DateTimeKind.Utc).AddTicks(6443),
                            Email = "Staff4@gmail.com",
                            IsDelete = false,
                            Name = "Staff4",
                            Password = "$2a$12$UsAbxEVisk8UhHEHJdBp9ea3MDTwMe4ThZfckTpipm7cad6voiy1C",
                            PhoneNumber = "444444444",
                            RoleID = 3
                        },
                        new
                        {
                            UserId = 8,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 57, 869, DateTimeKind.Utc).AddTicks(8327),
                            Email = "Customer1@gmail.com",
                            IsDelete = false,
                            Name = "Customer1",
                            Password = "$2a$12$ZrIJEE3.po0nk3lgUDkF0OT4yLpDM4sJo.UgqT6he22iANBOzKjtW",
                            PhoneNumber = "333333333",
                            RoleID = 4
                        },
                        new
                        {
                            UserId = 9,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 120, DateTimeKind.Utc).AddTicks(4887),
                            Email = "Customer2@gmail.com",
                            IsDelete = false,
                            Name = "Customer2",
                            Password = "$2a$12$vJPMfa8gA23zlv1m.jbhCu9Kd.INZXgVoIdCF07NwOpfJWKrUV2WW",
                            PhoneNumber = "222222222",
                            RoleID = 4
                        },
                        new
                        {
                            UserId = 10,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 380, DateTimeKind.Utc).AddTicks(165),
                            Email = "Customer3@gmail.com",
                            IsDelete = false,
                            Name = "Customer3",
                            Password = "$2a$12$KVAs3JHQ.ti/KPT4icsQse04qYtfAwNWABt4QQeMlUpCdAFXlexx6",
                            PhoneNumber = "111111111",
                            RoleID = 4
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Property<int>("UtensilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UtensilTypeID")
                        .HasColumnType("int");

                    b.HasKey("UtensilId");

                    b.HasIndex("UtensilTypeID");

                    b.ToTable("Utensils");

                    b.HasData(
                        new
                        {
                            UtensilId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5652),
                            Description = "Set of 5 pairs of traditional bamboo chopsticks.",
                            ImageURL = "https://example.com/images/bamboo-chopsticks.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5643),
                            Material = "Bamboo",
                            Name = "Bamboo Chopsticks Set",
                            Price = 12.99m,
                            Quantity = 100,
                            Status = true,
                            UtensilTypeID = 1
                        },
                        new
                        {
                            UtensilId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5655),
                            Description = "Durable stainless steel ladle for serving hotpot broth.",
                            ImageURL = "https://example.com/images/steel-ladle.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5653),
                            Material = "Stainless Steel",
                            Name = "Stainless Steel Hotpot Ladle",
                            Price = 9.99m,
                            Quantity = 75,
                            Status = true,
                            UtensilTypeID = 2
                        },
                        new
                        {
                            UtensilId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5657),
                            Description = "Fine mesh strainer for retrieving food from the hotpot.",
                            ImageURL = "https://example.com/images/mesh-strainer.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5656),
                            Material = "Stainless Steel",
                            Name = "Wire Mesh Strainer",
                            Price = 7.99m,
                            Quantity = 80,
                            Status = true,
                            UtensilTypeID = 3
                        },
                        new
                        {
                            UtensilId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5660),
                            Description = "Set of 4 ceramic bowls for individual servings.",
                            ImageURL = "https://example.com/images/ceramic-bowls.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5658),
                            Material = "Ceramic",
                            Name = "Ceramic Serving Bowl Set",
                            Price = 19.99m,
                            Quantity = 50,
                            Status = true,
                            UtensilTypeID = 4
                        },
                        new
                        {
                            UtensilId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5662),
                            Description = "Set of 6 durable melamine plates for hotpot dining.",
                            ImageURL = "https://example.com/images/melamine-plates.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Utc).AddTicks(5661),
                            Material = "Melamine",
                            Name = "Melamine Plates",
                            Price = 24.99m,
                            Quantity = 60,
                            Status = true,
                            UtensilTypeID = 5
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Property<int>("UtensilTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UtensilTypeId");

                    b.ToTable("UtensilTypes");

                    b.HasData(
                        new
                        {
                            UtensilTypeId = 1,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5262),
                            IsDelete = false,
                            Name = "Chopsticks"
                        },
                        new
                        {
                            UtensilTypeId = 2,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5286),
                            IsDelete = false,
                            Name = "Ladles"
                        },
                        new
                        {
                            UtensilTypeId = 3,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5287),
                            IsDelete = false,
                            Name = "Strainers"
                        },
                        new
                        {
                            UtensilTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5298),
                            IsDelete = false,
                            Name = "Bowls"
                        },
                        new
                        {
                            UtensilTypeId = 5,
                            CreatedAt = new DateTime(2025, 3, 13, 1, 5, 58, 628, DateTimeKind.Local).AddTicks(5299),
                            IsDelete = false,
                            Name = "Plates"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("ShiftStartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Response")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("ManagerWorkShift", b =>
                {
                    b.Property<int>("ManagersManagerId")
                        .HasColumnType("int");

                    b.Property<int>("WorkShiftsId")
                        .HasColumnType("int");

                    b.HasKey("ManagersManagerId", "WorkShiftsId");

                    b.HasIndex("WorkShiftsId");

                    b.ToTable("ManagerWorkShift");
                });

            modelBuilder.Entity("StaffWorkShift", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("WorkShiftsId")
                        .HasColumnType("int");

                    b.HasKey("StaffId", "WorkShiftsId");

                    b.HasIndex("WorkShiftsId");

                    b.ToTable("StaffWorkShift");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.ChatSession", null)
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", "AppliedDiscount")
                        .WithMany("Combos")
                        .HasForeignKey("AppliedDiscountID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "HotpotBroth")
                        .WithMany()
                        .HasForeignKey("HotpotBrothID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", null)
                        .WithMany("CombosAsBroth")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", "TurtorialVideo")
                        .WithMany("Combo")
                        .HasForeignKey("TurtorialVideoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppliedDiscount");

                    b.Navigation("HotpotBroth");

                    b.Navigation("TurtorialVideo");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboAllowedIngredientType", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("AllowedIngredientTypes")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("ComboID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ConditionLog", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotPotInventory")
                        .WithMany("ConditionLogs")
                        .HasForeignKey("HotPotInventoryId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithMany("ConditionLogs")
                        .HasForeignKey("UtensilID");

                    b.Navigation("HotPotInventory");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customer", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Customer", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", "AppliedDiscount")
                        .WithMany("Customizations")
                        .HasForeignKey("AppliedDiscountID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithOne("Customization")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Customization", "ComboID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "HotpotBroth")
                        .WithMany()
                        .HasForeignKey("HotpotBrothID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", null)
                        .WithMany("CustomizationsAsBroth")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Customizations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppliedDiscount");

                    b.Navigation("Combo");

                    b.Navigation("HotpotBroth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("CustomizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customization");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Hotpot", "Hotpot")
                        .WithMany("InventoryUnits")
                        .HasForeignKey("HotpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotpot");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientType", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientPrices")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Manager", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Manager", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Discount", "Discount")
                        .WithOne("Order")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Order", "DiscountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.OrderDetail", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "ComboID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "CustomizationID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Hotpot", "Hotpot")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "HotpotID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "IngredientID");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.OrderDetail", "UtensilID");

                    b.Navigation("Combo");

                    b.Navigation("Customization");

                    b.Navigation("Hotpot");

                    b.Navigation("Ingredient");

                    b.Navigation("Order");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Payment", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ReplacementRequest", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Staff", "AssignedStaff")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("AssignedStaffId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.ConditionLog", "ConditionLog")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("ConditionLogId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customer", "Customer")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotPotInventory")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("HotPotInventoryId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("UtensilId");

                    b.Navigation("AssignedStaff");

                    b.Navigation("ConditionLog");

                    b.Navigation("Customer");

                    b.Navigation("HotPotInventory");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("ShippingOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Staff", "Staff")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Staff", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Staff", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.UtensilType", "UtensilType")
                        .WithMany("Utensils")
                        .HasForeignKey("UtensilTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UtensilType");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "ApprovedByUser")
                        .WithMany("ApprovedFeedbacks")
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("Feedback", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Manager");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagerWorkShift", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Manager", null)
                        .WithMany()
                        .HasForeignKey("ManagersManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("WorkShiftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaffWorkShift", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("WorkShiftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Navigation("AllowedIngredientTypes");

                    b.Navigation("ComboIngredients");

                    b.Navigation("Customization");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ConditionLog", b =>
                {
                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customer", b =>
                {
                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Navigation("CustomizationIngredients");

                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Navigation("ConditionLogs");

                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Navigation("InventoryUnits");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Navigation("ComboIngredients");

                    b.Navigation("CombosAsBroth");

                    b.Navigation("CustomizationIngredients");

                    b.Navigation("CustomizationsAsBroth");

                    b.Navigation("IngredientPrices");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payment");

                    b.Navigation("ShippingOrder");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Staff", b =>
                {
                    b.Navigation("ReplacementRequests");

                    b.Navigation("ShippingOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Navigation("ApprovedFeedbacks");

                    b.Navigation("Customer");

                    b.Navigation("Customizations");

                    b.Navigation("Feedbacks");

                    b.Navigation("Manager");

                    b.Navigation("Orders");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Navigation("ConditionLogs");

                    b.Navigation("OrderDetail");

                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Navigation("Utensils");
                });
#pragma warning restore 612, 618
        }
    }
}
