// <auto-generated />
using System;
using Capstone.HPTY.RepositoryLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.HPTY.RepositoryLayer.Migrations
{
    [DbContext(typeof(HPTYContext))]
    [Migration("20250405082924_UpdateComboCustomizationRelationship")]
    partial class UpdateComboCustomizationRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMessageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("SessionId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Property<int>("ChatSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatSessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatSessionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboId"));

                    b.Property<int?>("AppliedDiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HotpotBrothId")
                        .HasColumnType("int")
                        .HasColumnName("HotpotBrothId");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCustomizable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TurtorialVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboId");

                    b.HasIndex("AppliedDiscountId");

                    b.HasIndex("HotpotBrothId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("TurtorialVideoId");

                    b.ToTable("Combos", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboAllowedIngredientType", b =>
                {
                    b.Property<int>("ComboAllowedIngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboAllowedIngredientTypeId"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboAllowedIngredientTypeId");

                    b.HasIndex("ComboId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("ComboAllowedIngredientTypes");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.Property<int>("ComboIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboIngredientId"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ComboId", "IngredientId");

                    b.ToTable("ComboIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Property<int>("CustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationId"));

                    b.Property<int?>("AppliedDiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotpotBrothId")
                        .HasColumnType("int")
                        .HasColumnName("HotpotBrothId");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustomizationId");

                    b.HasIndex("AppliedDiscountId");

                    b.HasIndex("ComboId");

                    b.HasIndex("HotpotBrothId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserId");

                    b.ToTable("Customizations", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.Property<int>("CustomizationIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationIngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomizationId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomizationIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("CustomizationId", "IngredientId");

                    b.ToTable("CustomizationIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.DamageDevice", b =>
                {
                    b.Property<int>("DamageDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DamageDeviceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("HotPotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoggedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilId")
                        .HasColumnType("int");

                    b.HasKey("DamageDeviceId");

                    b.HasIndex("HotPotInventoryId");

                    b.HasIndex("UtensilId");

                    b.ToTable("DamageDevices");

                    b.HasData(
                        new
                        {
                            DamageDeviceId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3075),
                            Description = "Tay cầm của nồi lẩu bị gãy và cần được thay thế.",
                            HotPotInventoryId = 15,
                            IsDelete = false,
                            LoggedDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3078),
                            Name = "Tay Cầm Bị Gãy",
                            Status = 1
                        },
                        new
                        {
                            DamageDeviceId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3079),
                            Description = "Đế của nồi lẩu bị nứt và cần được thay thế.",
                            HotPotInventoryId = 10,
                            IsDelete = false,
                            LoggedDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3080),
                            Name = "Đế Nồi Bị Nứt",
                            Status = 2
                        },
                        new
                        {
                            DamageDeviceId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3081),
                            Description = "Nắp của nồi lẩu bị hư hỏng và cần được thay thế.",
                            HotPotInventoryId = 9,
                            IsDelete = false,
                            LoggedDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3082),
                            Name = "Nắp Nồi Hư Hỏng",
                            Status = 3
                        },
                        new
                        {
                            DamageDeviceId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3083),
                            Description = "Đĩa bị vỡ và cần được thay thế.",
                            IsDelete = false,
                            LoggedDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3083),
                            Name = "Đĩa Bị Vỡ",
                            Status = 4,
                            UtensilId = 5
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("PointCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Property<int>("HotPotInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotPotInventoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotpotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SeriesNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotPotInventoryId");

                    b.HasIndex("HotpotId");

                    b.ToTable("HotPotInventorys");

                    b.HasData(
                        new
                        {
                            HotPotInventoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2617),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2619),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2621),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2622),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2623),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 6,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2633),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 7,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2649),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 8,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2650),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0003",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 9,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2651),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0004",
                            Status = 2
                        },
                        new
                        {
                            HotPotInventoryId = 10,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2652),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0005",
                            Status = 2
                        },
                        new
                        {
                            HotPotInventoryId = 11,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2653),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 12,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2654),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 13,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2655),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 14,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2656),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0003",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 15,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2657),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0004",
                            Status = 2
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Property<int>("HotpotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotpotId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotpotId");

                    b.ToTable("Hotpots");

                    b.HasData(
                        new
                        {
                            HotpotId = 1,
                            BasePrice = 2200000m,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2536),
                            Description = "Nồi lẩu đồng truyền thống với hệ thống đốt than.",
                            ImageURL = "https://example.com/images/classic-copper-hotpot.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Đồng",
                            Name = "Nồi Lẩu Đồng Cổ Điển",
                            Price = 730000m,
                            Quantity = 5,
                            Size = "M"
                        },
                        new
                        {
                            HotpotId = 2,
                            BasePrice = 3170000m,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2549),
                            Description = "Nồi lẩu điện với điều khiển nhiệt độ và lớp phủ chống dính.",
                            ImageURL = "https://example.com/images/modern-electric-hotpot.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Thép Không Gỉ",
                            Name = "Nồi Lẩu Điện Hiện Đại",
                            Price = 1460000m,
                            Quantity = 2,
                            Size = "L"
                        },
                        new
                        {
                            HotpotId = 3,
                            BasePrice = 1710000m,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2551),
                            Description = "Nồi lẩu nhỏ gọn di động hoàn hảo cho du lịch hoặc các buổi tụ họp nhỏ.",
                            ImageURL = "https://example.com/images/mini-portable-hotpot.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Nhôm",
                            Name = "Nồi Lẩu Mini Di Động",
                            Price = 490000m,
                            Quantity = 2,
                            Size = "S"
                        },
                        new
                        {
                            HotpotId = 4,
                            BasePrice = 3660000m,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2553),
                            Description = "Nồi lẩu đa ngăn cho phép nấu nhiều loại nước lẩu khác nhau trong một nồi.",
                            ImageURL = "https://example.com/images/dual-section-hotpot.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Thép Không Gỉ",
                            Name = "Nồi Lẩu Hai Ngăn",
                            Price = 1710000m,
                            Quantity = 2,
                            Size = "L"
                        },
                        new
                        {
                            HotpotId = 5,
                            BasePrice = 1950000m,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2556),
                            Description = "Nồi lẩu gốm truyền thống giữ nhiệt cực tốt.",
                            ImageURL = "https://example.com/images/traditional-ceramic-hotpot.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Gốm",
                            Name = "Nồi Lẩu Gốm Truyền Thống",
                            Price = 980000m,
                            Quantity = 4,
                            Size = "M"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2822),
                            Description = "Thịt bò cao cấp cắt lát mỏng hoàn hảo cho lẩu.",
                            ImageURL = "https://example.com/images/sliced-beef.jpg",
                            IngredientTypeId = 7,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Thịt Bò Cắt Lát",
                            Quantity = 100
                        },
                        new
                        {
                            IngredientId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2828),
                            Description = "Thịt cừu mềm cắt lát, hoàn hảo cho nấu nhanh.",
                            ImageURL = "https://example.com/images/lamb-slices.jpg",
                            IngredientTypeId = 7,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Thịt Cừu Cắt Lát",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2870),
                            Description = "Thịt ba chỉ heo cắt mỏng với tỷ lệ mỡ-thịt hoàn hảo.",
                            ImageURL = "https://example.com/images/pork-belly.jpg",
                            IngredientTypeId = 7,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Ba Chỉ Heo",
                            Quantity = 75
                        },
                        new
                        {
                            IngredientId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2871),
                            Description = "Tôm tươi, đã bóc vỏ và làm sạch.",
                            ImageURL = "https://example.com/images/shrimp.jpg",
                            IngredientTypeId = 2,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Tôm",
                            Quantity = 90
                        },
                        new
                        {
                            IngredientId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2872),
                            Description = "Cá viên đàn hồi làm từ cá tươi xay.",
                            ImageURL = "https://example.com/images/fish-balls.jpg",
                            IngredientTypeId = 2,
                            IsDelete = false,
                            MinStockLevel = 30,
                            Name = "Cá Viên",
                            Quantity = 120
                        },
                        new
                        {
                            IngredientId = 6,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2874),
                            Description = "Mực tươi cắt thành khoanh.",
                            ImageURL = "https://example.com/images/squid.jpg",
                            IngredientTypeId = 2,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Mực",
                            Quantity = 60
                        },
                        new
                        {
                            IngredientId = 7,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2875),
                            Description = "Rau giòn, lá xanh hoàn hảo cho lẩu.",
                            ImageURL = "https://example.com/images/napa-cabbage.jpg",
                            IngredientTypeId = 3,
                            IsDelete = false,
                            MinStockLevel = 25,
                            Name = "Cải Thảo",
                            Quantity = 100
                        },
                        new
                        {
                            IngredientId = 8,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2876),
                            Description = "Rau chân vịt tươi, đã rửa sạch và sẵn sàng để nấu.",
                            ImageURL = "https://example.com/images/spinach.jpg",
                            IngredientTypeId = 3,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Rau Chân Vịt",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 9,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2877),
                            Description = "Bắp ngọt cắt thành miếng vừa ăn.",
                            ImageURL = "https://example.com/images/corn.jpg",
                            IngredientTypeId = 3,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Bắp",
                            Quantity = 70
                        },
                        new
                        {
                            IngredientId = 10,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2879),
                            Description = "Mì lúa mì Nhật Bản dày và dai.",
                            ImageURL = "https://example.com/images/udon-noodles.jpg",
                            IngredientTypeId = 4,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Mì Udon",
                            Quantity = 80
                        },
                        new
                        {
                            IngredientId = 11,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2880),
                            Description = "Miến trong suốt làm từ tinh bột đậu xanh.",
                            ImageURL = "https://example.com/images/glass-noodles.jpg",
                            IngredientTypeId = 4,
                            IsDelete = false,
                            MinStockLevel = 20,
                            Name = "Miến",
                            Quantity = 85
                        },
                        new
                        {
                            IngredientId = 12,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2882),
                            Description = "Mì lúa mì xoăn hoàn hảo cho lẩu.",
                            ImageURL = "https://example.com/images/ramen-noodles.jpg",
                            IngredientTypeId = 4,
                            IsDelete = false,
                            MinStockLevel = 25,
                            Name = "Mì Ramen",
                            Quantity = 90
                        },
                        new
                        {
                            IngredientId = 13,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2883),
                            Description = "Đậu phụ cứng cắt khối giữ nguyên hình dạng trong lẩu.",
                            ImageURL = "https://example.com/images/firm-tofu.jpg",
                            IngredientTypeId = 5,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Đậu Phụ Cứng",
                            Quantity = 60
                        },
                        new
                        {
                            IngredientId = 14,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2884),
                            Description = "Đậu phụ chiên giòn hấp thụ hương vị nước lẩu.",
                            ImageURL = "https://example.com/images/tofu-puffs.jpg",
                            IngredientTypeId = 5,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Đậu Phụ Chiên",
                            Quantity = 65
                        },
                        new
                        {
                            IngredientId = 15,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2885),
                            Description = "Nấm hương thơm ngon, tươi hoặc khô.",
                            ImageURL = "https://example.com/images/shiitake.jpg",
                            IngredientTypeId = 6,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Nấm Hương",
                            Quantity = 70
                        },
                        new
                        {
                            IngredientId = 16,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2886),
                            Description = "Nấm kim châm mỏng, thân dài.",
                            ImageURL = "https://example.com/images/enoki.jpg",
                            IngredientTypeId = 6,
                            IsDelete = false,
                            MinStockLevel = 15,
                            Name = "Nấm Kim Châm",
                            Quantity = 65
                        },
                        new
                        {
                            IngredientId = 17,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2887),
                            Description = "Nước lẩu cay truyền thống với hạt tiêu Tứ Xuyên và dầu ớt.",
                            ImageURL = "https://example.com/images/sichuan-broth.jpg",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Tứ Xuyên Cay",
                            Quantity = 50
                        },
                        new
                        {
                            IngredientId = 18,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2888),
                            Description = "Nước lẩu cà chua chua ngọt.",
                            ImageURL = "https://example.com/images/tomato-broth.jpg",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Cà Chua",
                            Quantity = 45
                        },
                        new
                        {
                            IngredientId = 19,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2890),
                            Description = "Nước lẩu đậm đà làm từ nhiều loại nấm.",
                            ImageURL = "https://example.com/images/mushroom-broth.jpg",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Nấm",
                            Quantity = 40
                        },
                        new
                        {
                            IngredientId = 20,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2891),
                            Description = "Nước lẩu nhẹ, trong làm từ xương hầm nhiều giờ.",
                            ImageURL = "https://example.com/images/bone-broth.jpg",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Xương Trong",
                            Quantity = 55
                        },
                        new
                        {
                            IngredientId = 21,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2892),
                            Description = "Sốt kem làm từ hạt mè xay.",
                            ImageURL = "https://example.com/images/sesame-sauce.jpg",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Sốt Mè",
                            Quantity = 40
                        },
                        new
                        {
                            IngredientId = 22,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2893),
                            Description = "Nước tương pha với tỏi băm.",
                            ImageURL = "https://example.com/images/garlic-soy.jpg",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Nước Tương Tỏi",
                            Quantity = 45
                        },
                        new
                        {
                            IngredientId = 23,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2894),
                            Description = "Dầu cay làm từ ớt ngâm dầu.",
                            ImageURL = "https://example.com/images/chili-oil.jpg",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Dầu Ớt",
                            Quantity = 50
                        },
                        new
                        {
                            IngredientId = 24,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2895),
                            Description = "Sốt đậm đà làm từ dầu đậu nành, tỏi, hành và hải sản khô.",
                            ImageURL = "https://example.com/images/shacha-sauce.jpg",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MinStockLevel = 10,
                            Name = "Tương Sa Tế",
                            Quantity = 35
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.Property<int>("IngredientPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientPriceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientPriceId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientPrices");

                    b.HasData(
                        new
                        {
                            IngredientPriceId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2965),
                            EffectiveDate = new DateTime(2025, 3, 6, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2967),
                            IngredientId = 1,
                            IsDelete = false,
                            Price = 120000m
                        },
                        new
                        {
                            IngredientPriceId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2977),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2978),
                            IngredientId = 1,
                            IsDelete = false,
                            Price = 135000m
                        },
                        new
                        {
                            IngredientPriceId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2979),
                            EffectiveDate = new DateTime(2025, 3, 6, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2980),
                            IngredientId = 2,
                            IsDelete = false,
                            Price = 150000m
                        },
                        new
                        {
                            IngredientPriceId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2981),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2982),
                            IngredientId = 2,
                            IsDelete = false,
                            Price = 165000m
                        },
                        new
                        {
                            IngredientPriceId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2983),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2984),
                            IngredientId = 3,
                            IsDelete = false,
                            Price = 95000m
                        },
                        new
                        {
                            IngredientPriceId = 6,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2984),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2985),
                            IngredientId = 4,
                            IsDelete = false,
                            Price = 110000m
                        },
                        new
                        {
                            IngredientPriceId = 7,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2986),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2987),
                            IngredientId = 5,
                            IsDelete = false,
                            Price = 75000m
                        },
                        new
                        {
                            IngredientPriceId = 8,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2987),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2988),
                            IngredientId = 6,
                            IsDelete = false,
                            Price = 90000m
                        },
                        new
                        {
                            IngredientPriceId = 9,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2989),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2990),
                            IngredientId = 7,
                            IsDelete = false,
                            Price = 25000m
                        },
                        new
                        {
                            IngredientPriceId = 10,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2991),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2991),
                            IngredientId = 8,
                            IsDelete = false,
                            Price = 20000m
                        },
                        new
                        {
                            IngredientPriceId = 11,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2992),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2993),
                            IngredientId = 9,
                            IsDelete = false,
                            Price = 18000m
                        },
                        new
                        {
                            IngredientPriceId = 12,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2994),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2995),
                            IngredientId = 10,
                            IsDelete = false,
                            Price = 35000m
                        },
                        new
                        {
                            IngredientPriceId = 13,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2996),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2996),
                            IngredientId = 11,
                            IsDelete = false,
                            Price = 30000m
                        },
                        new
                        {
                            IngredientPriceId = 14,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2998),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2998),
                            IngredientId = 12,
                            IsDelete = false,
                            Price = 32000m
                        },
                        new
                        {
                            IngredientPriceId = 15,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2999),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3007),
                            IngredientId = 13,
                            IsDelete = false,
                            Price = 22000m
                        },
                        new
                        {
                            IngredientPriceId = 16,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3008),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3009),
                            IngredientId = 14,
                            IsDelete = false,
                            Price = 25000m
                        },
                        new
                        {
                            IngredientPriceId = 17,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3010),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3011),
                            IngredientId = 15,
                            IsDelete = false,
                            Price = 45000m
                        },
                        new
                        {
                            IngredientPriceId = 18,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3012),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3012),
                            IngredientId = 16,
                            IsDelete = false,
                            Price = 35000m
                        },
                        new
                        {
                            IngredientPriceId = 19,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3013),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3014),
                            IngredientId = 17,
                            IsDelete = false,
                            Price = 65000m
                        },
                        new
                        {
                            IngredientPriceId = 20,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3015),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3015),
                            IngredientId = 18,
                            IsDelete = false,
                            Price = 55000m
                        },
                        new
                        {
                            IngredientPriceId = 21,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3016),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3017),
                            IngredientId = 19,
                            IsDelete = false,
                            Price = 60000m
                        },
                        new
                        {
                            IngredientPriceId = 22,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3018),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3019),
                            IngredientId = 20,
                            IsDelete = false,
                            Price = 50000m
                        },
                        new
                        {
                            IngredientPriceId = 23,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3019),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3020),
                            IngredientId = 21,
                            IsDelete = false,
                            Price = 40000m
                        },
                        new
                        {
                            IngredientPriceId = 24,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3021),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3022),
                            IngredientId = 22,
                            IsDelete = false,
                            Price = 35000m
                        },
                        new
                        {
                            IngredientPriceId = 25,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3023),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3023),
                            IngredientId = 23,
                            IsDelete = false,
                            Price = 38000m
                        },
                        new
                        {
                            IngredientPriceId = 26,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3024),
                            EffectiveDate = new DateTime(2025, 4, 2, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(3025),
                            IngredientId = 24,
                            IsDelete = false,
                            Price = 42000m
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Property<int>("IngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientTypeId");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            IngredientTypeId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2771),
                            IsDelete = false,
                            Name = "Nước Lẩu"
                        },
                        new
                        {
                            IngredientTypeId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2774),
                            IsDelete = false,
                            Name = "Hải Sản"
                        },
                        new
                        {
                            IngredientTypeId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2775),
                            IsDelete = false,
                            Name = "Rau Củ"
                        },
                        new
                        {
                            IngredientTypeId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2776),
                            IsDelete = false,
                            Name = "Mì"
                        },
                        new
                        {
                            IngredientTypeId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2776),
                            IsDelete = false,
                            Name = "Đậu Phụ"
                        },
                        new
                        {
                            IngredientTypeId = 6,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2777),
                            IsDelete = false,
                            Name = "Nấm"
                        },
                        new
                        {
                            IngredientTypeId = 7,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2778),
                            IsDelete = false,
                            Name = "Thịt"
                        },
                        new
                        {
                            IngredientTypeId = 8,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2779),
                            IsDelete = false,
                            Name = "Nước Chấm"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("HasRentItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasSellItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("DiscountId")
                        .IsUnique()
                        .HasFilter("[DiscountId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionCode")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.PaymentReceipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceiptId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("PaymentReceipts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DamageFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpectedReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HotpotDeposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RentalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnCondition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("RentOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrderDetail", b =>
                {
                    b.Property<int>("RentOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentOrderDetailId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HotpotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilId")
                        .HasColumnType("int");

                    b.HasKey("RentOrderDetailId");

                    b.HasIndex("HotpotInventoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UtensilId");

                    b.ToTable("RentOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ReplacementRequest", b =>
                {
                    b.Property<int>("ReplacementRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplacementRequestId"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AssignedStaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DamageDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int?>("HotPotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilId")
                        .HasColumnType("int");

                    b.HasKey("ReplacementRequestId");

                    b.HasIndex("AssignedStaffId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DamageDeviceId");

                    b.HasIndex("HotPotInventoryId");

                    b.HasIndex("UtensilId");

                    b.ToTable("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 177, DateTimeKind.Utc).AddTicks(4518),
                            IsDelete = false,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 177, DateTimeKind.Utc).AddTicks(4527),
                            IsDelete = false,
                            Name = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 177, DateTimeKind.Utc).AddTicks(4528),
                            IsDelete = false,
                            Name = "Staff"
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 177, DateTimeKind.Utc).AddTicks(4529),
                            IsDelete = false,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("SellOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrderDetail", b =>
                {
                    b.Property<int>("SellOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellOrderDetailId"));

                    b.Property<int?>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomizationId")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SellOrderDetailId");

                    b.HasIndex("ComboId");

                    b.HasIndex("CustomizationId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("OrderId");

                    b.ToTable("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.Property<int>("ShippingOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingOrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProofImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProofImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProofTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("SignatureData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ShippingOrderId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", b =>
                {
                    b.Property<int>("SizeDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeDiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SizeDiscountId");

                    b.ToTable("SizeDiscounts");

                    b.HasData(
                        new
                        {
                            SizeDiscountId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5026),
                            DiscountPercentage = 4.00m,
                            IsDelete = false,
                            MinSize = 2,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5027)
                        },
                        new
                        {
                            SizeDiscountId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5032),
                            DiscountPercentage = 8.00m,
                            IsDelete = false,
                            MinSize = 4,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5033)
                        },
                        new
                        {
                            SizeDiscountId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5035),
                            DiscountPercentage = 12.00m,
                            IsDelete = false,
                            MinSize = 6,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5036)
                        },
                        new
                        {
                            SizeDiscountId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5038),
                            DiscountPercentage = 16.00m,
                            IsDelete = false,
                            MinSize = 8,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5039)
                        },
                        new
                        {
                            SizeDiscountId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5042),
                            DiscountPercentage = 20.00m,
                            IsDelete = false,
                            MinSize = 10,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5042)
                        },
                        new
                        {
                            SizeDiscountId = 6,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5045),
                            DiscountPercentage = 24.00m,
                            IsDelete = false,
                            MinSize = 15,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5046)
                        },
                        new
                        {
                            SizeDiscountId = 7,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5048),
                            DiscountPercentage = 28.00m,
                            IsDelete = false,
                            MinSize = 20,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(5049)
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.StaffPickupAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RentOrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex("RentOrderDetailId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffPickupAssignments");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Property<int>("TurtorialVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurtorialVideoId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("TurtorialVideoId");

                    b.ToTable("TurtorialVideos");

                    b.HasData(
                        new
                        {
                            TurtorialVideoId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2354),
                            Description = "Hướng dẫn toàn diện về cách thiết lập và sử dụng nồi lẩu truyền thống.",
                            IsDelete = false,
                            Name = "Cách Sử Dụng Nồi Lẩu Truyền Thống",
                            VideoURL = "https://www.youtube.com/watch?v=traditional-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2365),
                            Description = "Học cách thiết lập và sử dụng nồi lẩu điện an toàn.",
                            IsDelete = false,
                            Name = "Hướng Dẫn Thiết Lập Nồi Lẩu Điện",
                            VideoURL = "https://www.youtube.com/watch?v=electric-hotpot-setup"
                        },
                        new
                        {
                            TurtorialVideoId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2366),
                            Description = "Mẹo và thủ thuật để sử dụng nồi lẩu di động ở bất kỳ đâu.",
                            IsDelete = false,
                            Name = "Nồi Lẩu Di Động Mọi Lúc Mọi Nơi",
                            VideoURL = "https://www.youtube.com/watch?v=portable-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2367),
                            Description = "Cách sử dụng hiệu quả tất cả các ngăn trong nồi lẩu đa ngăn của bạn.",
                            IsDelete = false,
                            Name = "Làm Chủ Nồi Lẩu Đa Ngăn",
                            VideoURL = "https://www.youtube.com/watch?v=multi-compartment-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2368),
                            Description = "Học cách chăm sóc và bảo quản nồi lẩu gốm đúng cách.",
                            IsDelete = false,
                            Name = "Hướng Dẫn Chăm Sóc Nồi Lẩu Gốm",
                            VideoURL = "https://www.youtube.com/watch?v=ceramic-hotpot-care"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double?>("LoyatyPoint")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkDays")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 177, DateTimeKind.Utc).AddTicks(4646),
                            Email = "Admin@gmail.com",
                            IsDelete = false,
                            Name = "Admin",
                            Password = "$2a$12$oevRlwFgHzOW.PLRdMTWh.q6Z6NueGtQcU1dPqZGmgxz83Q37SfIa",
                            PhoneNumber = "987654321",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 407, DateTimeKind.Utc).AddTicks(635),
                            Email = "Manager1@gmail.com",
                            IsDelete = false,
                            Name = "Manager 1",
                            Password = "$2a$12$ooQK45fg7wP/DEcmaIvAX.RcHIDlvnQHq5wI3DoFcv72a1vgtMkoG",
                            PhoneNumber = "999999999",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 634, DateTimeKind.Utc).AddTicks(166),
                            Email = "Manager2@gmail.com",
                            IsDelete = false,
                            Name = "Manager 2",
                            Password = "$2a$12$8nN0BUlw29zdsrPsaIFfg.KibAiiDWZCm4cmU5kvWPqG9/kEP1/4y",
                            PhoneNumber = "888888888",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 20, 878, DateTimeKind.Utc).AddTicks(1603),
                            Email = "Staff1@gmail.com",
                            IsDelete = false,
                            Name = "Staff 1",
                            Password = "$2a$12$i/693.tSIWMZjWjNZuM30eoRamL44lL9ZOXMnBFEj.ORQRWPWyd6y",
                            PhoneNumber = "777777777",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 21, 122, DateTimeKind.Utc).AddTicks(3619),
                            Email = "Staff2@gmail.com",
                            IsDelete = false,
                            Name = "Staff 2",
                            Password = "$2a$12$xSC8BkWuCk2D8gQ1ot8Pg.tQmglNEfhxj1/L.4EAmKEhbtnOM8bwK",
                            PhoneNumber = "666666666",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 21, 350, DateTimeKind.Utc).AddTicks(6721),
                            Email = "Staff3@gmail.com",
                            IsDelete = false,
                            Name = "Staff 3",
                            Password = "$2a$12$nClArMXWXQcrzwAAASatNOp4IEg6qyMp63u0gr8v3y4ADQZBUFkYK",
                            PhoneNumber = "555555555",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 21, 586, DateTimeKind.Utc).AddTicks(1155),
                            Email = "Staff4@gmail.com",
                            IsDelete = false,
                            Name = "Staff 4",
                            Password = "$2a$12$XVOJwLJk1viy8D4anyWB8.rKsPEweUDyTJdlKOo0RmM0D512rMRf2",
                            PhoneNumber = "444444444",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 21, 829, DateTimeKind.Utc).AddTicks(4677),
                            Email = "Customer1@gmail.com",
                            IsDelete = false,
                            Name = "Customer 1",
                            Password = "$2a$12$RZ0uH.ySFYbojZjYJvVVUufmkqAvp6kn/3WuS9mL73sBOank0mjd.",
                            PhoneNumber = "333333333",
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 74, DateTimeKind.Utc).AddTicks(7261),
                            Email = "Customer2@gmail.com",
                            IsDelete = false,
                            Name = "Customer 2",
                            Password = "$2a$12$LCIwhSlA83npijuRhpScZOFOk72xqxJq3cy.hWJk03gHlsoNQx906",
                            PhoneNumber = "222222222",
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 10,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 305, DateTimeKind.Utc).AddTicks(9301),
                            Email = "Customer3@gmail.com",
                            IsDelete = false,
                            LoyatyPoint = 200.0,
                            Name = "Customer 3",
                            Password = "$2a$12$lv8Djage90SV8unmIRx2Bu/l91w6/ZCZpWkTCWymLw7iowCcOqcYG",
                            PhoneNumber = "111111111",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Property<int>("UtensilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UtensilTypeId")
                        .HasColumnType("int");

                    b.HasKey("UtensilId");

                    b.HasIndex("UtensilTypeId");

                    b.ToTable("Utensils");

                    b.HasData(
                        new
                        {
                            UtensilId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2708),
                            Description = "Bộ 5 đôi đũa tre truyền thống.",
                            ImageURL = "https://example.com/images/bamboo-chopsticks.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2708),
                            Material = "Tre",
                            Name = "Bộ Đũa Tre",
                            Price = 320000m,
                            Quantity = 100,
                            Status = true,
                            UtensilTypeId = 1
                        },
                        new
                        {
                            UtensilId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2715),
                            Description = "Muỗng thép không gỉ bền chắc để múc nước lẩu.",
                            ImageURL = "https://example.com/images/steel-ladle.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2715),
                            Material = "Thép Không Gỉ",
                            Name = "Muỗng Lẩu Thép Không Gỉ",
                            Price = 245000m,
                            Quantity = 75,
                            Status = true,
                            UtensilTypeId = 2
                        },
                        new
                        {
                            UtensilId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2718),
                            Description = "Vợt lưới mịn để vớt thức ăn từ nồi lẩu.",
                            ImageURL = "https://example.com/images/mesh-strainer.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2718),
                            Material = "Thép Không Gỉ",
                            Name = "Vợt Lưới Kim Loại",
                            Price = 195000m,
                            Quantity = 80,
                            Status = true,
                            UtensilTypeId = 3
                        },
                        new
                        {
                            UtensilId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2721),
                            Description = "Bộ 4 bát gốm cho phần ăn cá nhân.",
                            ImageURL = "https://example.com/images/ceramic-bowls.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2721),
                            Material = "Gốm",
                            Name = "Bộ Bát Ăn Gốm",
                            Price = 490000m,
                            Quantity = 50,
                            Status = true,
                            UtensilTypeId = 4
                        },
                        new
                        {
                            UtensilId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2723),
                            Description = "Bộ 6 đĩa melamine bền chắc cho bữa ăn lẩu.",
                            ImageURL = "https://example.com/images/melamine-plates.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2723),
                            Material = "Melamine",
                            Name = "Đĩa Melamine",
                            Price = 610000m,
                            Quantity = 60,
                            Status = true,
                            UtensilTypeId = 5
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Property<int>("UtensilTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UtensilTypeId");

                    b.ToTable("UtensilTypes");

                    b.HasData(
                        new
                        {
                            UtensilTypeId = 1,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2286),
                            IsDelete = false,
                            Name = "Đũa"
                        },
                        new
                        {
                            UtensilTypeId = 2,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2294),
                            IsDelete = false,
                            Name = "Muôi"
                        },
                        new
                        {
                            UtensilTypeId = 3,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2295),
                            IsDelete = false,
                            Name = "Vợt"
                        },
                        new
                        {
                            UtensilTypeId = 4,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2295),
                            IsDelete = false,
                            Name = "Bát"
                        },
                        new
                        {
                            UtensilTypeId = 5,
                            CreatedAt = new DateTime(2025, 4, 5, 15, 29, 22, 557, DateTimeKind.Utc).AddTicks(2296),
                            IsDelete = false,
                            Name = "Đĩa"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.WorkShift", b =>
                {
                    b.Property<int>("WorkShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkShiftId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("ShiftEndTime")
                        .HasColumnType("time");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("ShiftStartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkShiftId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Response")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("UserWorkShift", b =>
                {
                    b.Property<int>("ManagersUserId")
                        .HasColumnType("int");

                    b.Property<int>("MangerWorkShiftsWorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("ManagersUserId", "MangerWorkShiftsWorkShiftId");

                    b.HasIndex("MangerWorkShiftsWorkShiftId");

                    b.ToTable("UserManagerWorkShifts", (string)null);
                });

            modelBuilder.Entity("UserWorkShift1", b =>
                {
                    b.Property<int>("StaffUserId")
                        .HasColumnType("int");

                    b.Property<int>("StaffWorkShiftsWorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("StaffUserId", "StaffWorkShiftsWorkShiftId");

                    b.HasIndex("StaffWorkShiftsWorkShiftId");

                    b.ToTable("UserStaffWorkShifts", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.ChatSession", null)
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", "AppliedDiscount")
                        .WithMany("Combos")
                        .HasForeignKey("AppliedDiscountId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "HotpotBroth")
                        .WithMany()
                        .HasForeignKey("HotpotBrothId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", null)
                        .WithMany("CombosAsBroth")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", "TurtorialVideo")
                        .WithMany("Combo")
                        .HasForeignKey("TurtorialVideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppliedDiscount");

                    b.Navigation("HotpotBroth");

                    b.Navigation("TurtorialVideo");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboAllowedIngredientType", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("AllowedIngredientTypes")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", "AppliedDiscount")
                        .WithMany("Customizations")
                        .HasForeignKey("AppliedDiscountId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("Customizations")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "HotpotBroth")
                        .WithMany()
                        .HasForeignKey("HotpotBrothId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", null)
                        .WithMany("CustomizationsAsBroth")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Customizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppliedDiscount");

                    b.Navigation("Combo");

                    b.Navigation("HotpotBroth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("CustomizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customization");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.DamageDevice", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotPotInventory")
                        .WithMany("ConditionLogs")
                        .HasForeignKey("HotPotInventoryId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithMany("ConditionLogs")
                        .HasForeignKey("UtensilId");

                    b.Navigation("HotPotInventory");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Hotpot", "Hotpot")
                        .WithMany("InventoryUnits")
                        .HasForeignKey("HotpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotpot");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientType", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientPrices")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Discount", "Discount")
                        .WithOne("Order")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Order", "DiscountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.PaymentReceipt", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Payment", "Payment")
                        .WithOne("Receipt")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.PaymentReceipt", "PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("RentOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.RentOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrderDetail", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotpotInventory")
                        .WithMany("RentOrderDetails")
                        .HasForeignKey("HotpotInventoryId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.RentOrder", "RentOrder")
                        .WithMany("RentOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithMany("RentOrderDetails")
                        .HasForeignKey("UtensilId");

                    b.Navigation("HotpotInventory");

                    b.Navigation("RentOrder");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ReplacementRequest", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "AssignedStaff")
                        .WithMany("StaffReplacementRequests")
                        .HasForeignKey("AssignedStaffId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Customer")
                        .WithMany("CustomerReplacementRequests")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.DamageDevice", "ConditionLog")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("DamageDeviceId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotPotInventory")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("HotPotInventoryId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("UtensilId");

                    b.Navigation("AssignedStaff");

                    b.Navigation("ConditionLog");

                    b.Navigation("Customer");

                    b.Navigation("HotPotInventory");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("SellOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.SellOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrderDetail", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("ComboId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("CustomizationId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SellOrder", "SellOrder")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Customization");

                    b.Navigation("Ingredient");

                    b.Navigation("SellOrder");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("ShippingOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Staff")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.StaffPickupAssignment", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.RentOrderDetail", "RentOrderDetail")
                        .WithMany()
                        .HasForeignKey("RentOrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RentOrderDetail");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.UtensilType", "UtensilType")
                        .WithMany("Utensils")
                        .HasForeignKey("UtensilTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UtensilType");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "ApprovedByUser")
                        .WithMany("ApprovedFeedbacks")
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("Feedback", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Manager");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserWorkShift", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ManagersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("MangerWorkShiftsWorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserWorkShift1", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("StaffUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("StaffWorkShiftsWorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Navigation("AllowedIngredientTypes");

                    b.Navigation("ComboIngredients");

                    b.Navigation("Customizations");

                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Navigation("CustomizationIngredients");

                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.DamageDevice", b =>
                {
                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Navigation("ConditionLogs");

                    b.Navigation("RentOrderDetails");

                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Navigation("InventoryUnits");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Navigation("ComboIngredients");

                    b.Navigation("CombosAsBroth");

                    b.Navigation("CustomizationIngredients");

                    b.Navigation("CustomizationsAsBroth");

                    b.Navigation("IngredientPrices");

                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Payment");

                    b.Navigation("Receipts");

                    b.Navigation("RentOrder");

                    b.Navigation("SellOrder");

                    b.Navigation("ShippingOrder");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.Navigation("Receipt")
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrder", b =>
                {
                    b.Navigation("RentOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrder", b =>
                {
                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Navigation("ApprovedFeedbacks");

                    b.Navigation("CustomerReplacementRequests");

                    b.Navigation("Customizations");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("ShippingOrders");

                    b.Navigation("StaffReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Navigation("ConditionLogs");

                    b.Navigation("RentOrderDetails");

                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Navigation("Utensils");
                });
#pragma warning restore 612, 618
        }
    }
}
