// <auto-generated />
using System;
using Capstone.HPTY.RepositoryLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.HPTY.RepositoryLayer.Migrations
{
    [DbContext(typeof(HPTYContext))]
    [Migration("20250605021413_updateStaffSchedule")]
    partial class updateStaffSchedule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMessageId"));

                    b.Property<int>("ChatSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBroadcast")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Property<int>("ChatSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatSessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatSessionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboId"));

                    b.Property<int?>("AppliedDiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsCustomizable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TurtorialVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboId");

                    b.HasIndex("AppliedDiscountId");

                    b.HasIndex("TurtorialVideoId");

                    b.ToTable("Combos", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboAllowedIngredientType", b =>
                {
                    b.Property<int>("ComboAllowedIngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboAllowedIngredientTypeId"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboAllowedIngredientTypeId");

                    b.HasIndex("ComboId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("ComboAllowedIngredientTypes");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.Property<int>("ComboIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboIngredientId"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ComboId", "IngredientId");

                    b.ToTable("ComboIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Property<int>("CustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationId"));

                    b.Property<int?>("AppliedDiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustomizationId");

                    b.HasIndex("AppliedDiscountId");

                    b.HasIndex("ComboId");

                    b.HasIndex("UserId");

                    b.ToTable("Customizations", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.Property<int>("CustomizationIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizationIngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomizationId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomizationIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("CustomizationId", "IngredientId");

                    b.ToTable("CustomizationIngredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.DamageDevice", b =>
                {
                    b.Property<int>("DamageDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DamageDeviceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HotPotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoggedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DamageDeviceId");

                    b.HasIndex("HotPotInventoryId");

                    b.ToTable("DamageDevices");

                    b.HasData(
                        new
                        {
                            DamageDeviceId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5792),
                            Description = "Tay cầm của nồi lẩu bị gãy và cần được thay thế.",
                            HotPotInventoryId = 15,
                            IsDelete = false,
                            LoggedDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5796),
                            Name = "Tay Cầm Bị Gãy",
                            Status = 1
                        },
                        new
                        {
                            DamageDeviceId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5798),
                            Description = "Đế của nồi lẩu bị nứt và cần được thay thế.",
                            HotPotInventoryId = 10,
                            IsDelete = false,
                            LoggedDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5799),
                            Name = "Đế Nồi Bị Nứt",
                            Status = 2
                        },
                        new
                        {
                            DamageDeviceId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5800),
                            Description = "Nắp của nồi lẩu bị hư hỏng và cần được thay thế.",
                            HotPotInventoryId = 9,
                            IsDelete = false,
                            LoggedDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5800),
                            Name = "Nắp Nồi Hư Hỏng",
                            Status = 3
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double?>("PointCost")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Property<int>("HotPotInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotPotInventoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotpotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SeriesNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotPotInventoryId");

                    b.HasIndex("HotpotId");

                    b.ToTable("HotPotInventorys");

                    b.HasData(
                        new
                        {
                            HotPotInventoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4854),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4864),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4869),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0003",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4870),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0004",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4871),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0005",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4872),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0006",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 7,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4873),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0007",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 8,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4874),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0008",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 9,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4875),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0009",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 10,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4876),
                            HotpotId = 1,
                            IsDelete = false,
                            SeriesNumber = "CP-2023-0010",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 11,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4877),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 12,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4877),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 13,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4878),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0003",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 14,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4879),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0004",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 15,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4880),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0005",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 16,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4881),
                            HotpotId = 2,
                            IsDelete = false,
                            SeriesNumber = "EL-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 17,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4882),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 18,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4882),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 19,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4883),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0003",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 20,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4884),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0004",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 21,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4885),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0005",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 22,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4886),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0006",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 23,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4887),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0007",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 24,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4888),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0008",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 25,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4889),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0009",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 26,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4889),
                            HotpotId = 3,
                            IsDelete = false,
                            SeriesNumber = "PT-2023-0010",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 27,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4890),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 28,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4891),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 29,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4892),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0003",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 30,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4893),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0004",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 31,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4894),
                            HotpotId = 4,
                            IsDelete = false,
                            SeriesNumber = "MC-2023-0005",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 32,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4894),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0001",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 33,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4895),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0002",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 34,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4896),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0003",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 35,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4897),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0004",
                            Status = 2
                        },
                        new
                        {
                            HotPotInventoryId = 36,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4898),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0005",
                            Status = 0
                        },
                        new
                        {
                            HotPotInventoryId = 37,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4899),
                            HotpotId = 5,
                            IsDelete = false,
                            SeriesNumber = "CR-2023-0006",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Property<int>("HotpotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotpotId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HotpotId");

                    b.ToTable("Hotpots");

                    b.HasData(
                        new
                        {
                            HotpotId = 1,
                            BasePrice = 2200000m,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3987),
                            Description = "Nồi lẩu đồng truyền thống với hệ thống đốt than.",
                            ImageURL = "[\"https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/noilaudongcodien.jpg?alt=media\\u0026token=6f345d27-7ff9-43e6-8beb-e50f29578436\"]",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Đồng",
                            Name = "Nồi Lẩu Đồng Cổ Điển",
                            Price = 73000m,
                            Size = "M"
                        },
                        new
                        {
                            HotpotId = 2,
                            BasePrice = 3170000m,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4545),
                            Description = "Nồi lẩu điện với điều khiển nhiệt độ và lớp phủ chống dính.",
                            ImageURL = "[\"https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/noi-lau-dien-sunhouse-shd4523-gia-re.jpg?alt=media\\u0026token=2d6c1dd9-c484-4dde-94a2-bdf52e511d0b\"]",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Thép Không Gỉ",
                            Name = "Nồi Lẩu Điện Hiện Đại",
                            Price = 146000m,
                            Size = "L"
                        },
                        new
                        {
                            HotpotId = 3,
                            BasePrice = 1710000m,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4565),
                            Description = "Nồi lẩu nhỏ gọn di động hoàn hảo cho du lịch hoặc các buổi tụ họp nhỏ.",
                            ImageURL = "[\"https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/noi-lau-mini-lebenlang-lbec0808-shr-1000x1000.jpg?alt=media\\u0026token=92f6bcd1-169c-43c0-8e73-013cb8a68637\"]",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Nhôm",
                            Name = "Nồi Lẩu Mini Di Động",
                            Price = 49000m,
                            Size = "S"
                        },
                        new
                        {
                            HotpotId = 4,
                            BasePrice = 3660000m,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4598),
                            Description = "Nồi lẩu đa ngăn cho phép nấu nhiều loại nước lẩu khác nhau trong một nồi.",
                            ImageURL = "[\"https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/lau-hai-ngan.jpg?alt=media%token=4c530d54-dafd-45fe-8d77-7b6c45a81b5a\"]",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Thép Không Gỉ",
                            Name = "Nồi Lẩu Hai Ngăn",
                            Price = 171000m,
                            Size = "L"
                        },
                        new
                        {
                            HotpotId = 5,
                            BasePrice = 1950000m,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(4629),
                            Description = "Nồi lẩu gốm truyền thống giữ nhiệt cực tốt.",
                            ImageURL = "[\"https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/lau%20inox.jpg?alt=media\\u0026token=e4963f3f-5130-4485-9932-39cecd7a98af\",\"https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/lau%20inox%202.jpg?alt=media\\u0026token=4dda3d4c-3ba3-4cd0-96fc-d4ff505c5887\"]",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Material = "Gốm",
                            Name = "Nồi Lẩu Gốm Truyền Thống",
                            Price = 98000m,
                            Size = "M"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("MeasurementValue")
                        .HasColumnType("float");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientId");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5122),
                            Description = "Thịt bò cao cấp cắt lát mỏng hoàn hảo cho lẩu.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/89d16277-5f5d-45f0-9be4-6d710ecf2eaa.png?alt=media&token=a0db0650-a99e-4044-8552-88b096956487",
                            IngredientTypeId = 7,
                            IsDelete = false,
                            MeasurementValue = 250.0,
                            MinStockLevel = 20,
                            Name = "Thịt Bò Cắt Lát",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5151),
                            Description = "Thịt cừu mềm cắt lát, hoàn hảo cho nấu nhanh.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/thit-cuu-cat-lat.jpg?alt=media&token=c2d6bbbd-b69d-450a-8d0e-396b135f35f3",
                            IngredientTypeId = 7,
                            IsDelete = false,
                            MeasurementValue = 250.0,
                            MinStockLevel = 15,
                            Name = "Thịt Cừu Cắt Lát",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5154),
                            Description = "Thịt ba chỉ heo cắt mỏng với tỷ lệ mỡ-thịt hoàn hảo.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/ba-chi-heo.png?alt=media&token=83bbc055-4726-4c68-8ede-f0a0ea17c2d4",
                            IngredientTypeId = 7,
                            IsDelete = false,
                            MeasurementValue = 250.0,
                            MinStockLevel = 15,
                            Name = "Ba Chỉ Heo",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5155),
                            Description = "Tôm tươi, đã bóc vỏ và làm sạch.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/shrimps.jpg?alt=media&token=3ef01d1a-0df5-4f5a-b8db-b1fe34ae89ca",
                            IngredientTypeId = 2,
                            IsDelete = false,
                            MeasurementValue = 200.0,
                            MinStockLevel = 20,
                            Name = "Tôm",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5157),
                            Description = "Cá viên đàn hồi làm từ cá tươi xay.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/C%C3%A1-vi%C3%AAn-g%E1%BA%A7n-nh%C6%B0-%C4%91%C6%B0%E1%BB%A3c-l%C3%A0m-m%C3%B3n-%C4%83n-ph%E1%BB%95-bi%E1%BA%BFn-nh%C6%B0-c%C3%A1-vi%C3%AAn-chi%C3%AAn.jpg?alt=media&token=98bd96d8-124e-4883-afa0-4482913cadfa",
                            IngredientTypeId = 2,
                            IsDelete = false,
                            MeasurementValue = 300.0,
                            MinStockLevel = 30,
                            Name = "Cá Viên",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5158),
                            Description = "Mực tươi cắt thành khoanh.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/M%E1%BB%B1c-t%C6%B0%C6%A1i-2-532x532.jpg?alt=media&token=1cd9d76a-0435-4fc3-b773-64af8b515e76",
                            IngredientTypeId = 2,
                            IsDelete = false,
                            MeasurementValue = 200.0,
                            MinStockLevel = 15,
                            Name = "Mực",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 7,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5159),
                            Description = "Rau giòn, lá xanh hoàn hảo cho lẩu.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/1ad2d8b1-30c1-45c6-aa26-fe898a065120.png?alt=media&token=918e0ce5-e455-4391-9d17-f7430b41c195",
                            IngredientTypeId = 3,
                            IsDelete = false,
                            MeasurementValue = 400.0,
                            MinStockLevel = 25,
                            Name = "Cải Thảo",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 8,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5161),
                            Description = "Rau chân vịt tươi, đã rửa sạch và sẵn sàng để nấu.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/spinach.png?alt=media&token=4ae0c9f7-e3a3-48bc-b56a-8594a0d081f2",
                            IngredientTypeId = 3,
                            IsDelete = false,
                            MeasurementValue = 300.0,
                            MinStockLevel = 20,
                            Name = "Rau Chân Vịt",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 9,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5162),
                            Description = "Bắp ngọt cắt thành miếng vừa ăn.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/corn.jpg?alt=media&token=3d64d225-6be7-4c8f-b8b4-8b19a220d09b",
                            IngredientTypeId = 3,
                            IsDelete = false,
                            MeasurementValue = 250.0,
                            MinStockLevel = 15,
                            Name = "Bắp",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 10,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5163),
                            Description = "Mì lúa mì Nhật Bản dày và dai.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/udon.png?alt=media&token=c05be1ca-db95-4dd2-8d36-c9567b3f7ea0",
                            IngredientTypeId = 4,
                            IsDelete = false,
                            MeasurementValue = 300.0,
                            MinStockLevel = 20,
                            Name = "Mì Udon",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 11,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5164),
                            Description = "Miến trong suốt làm từ tinh bột đậu xanh.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/1663922149_8W3viNBAwDyUEHTj_1663931837-php9bcja8.png?alt=media&token=8a3b05d0-3cdb-4916-b451-f1ee01d38cbf",
                            IngredientTypeId = 4,
                            IsDelete = false,
                            MeasurementValue = 200.0,
                            MinStockLevel = 20,
                            Name = "Miến",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 12,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5166),
                            Description = "Mì lúa mì xoăn hoàn hảo cho lẩu.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/mi-ramen-luoc-cap-dong%20(2).png?alt=media&token=5826d348-02c2-4ded-b350-c70cc7ebc42e",
                            IngredientTypeId = 4,
                            IsDelete = false,
                            MeasurementValue = 250.0,
                            MinStockLevel = 25,
                            Name = "Mì Ramen",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 13,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5167),
                            Description = "Đậu phụ cứng cắt khối giữ nguyên hình dạng trong lẩu.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/tofu.png?alt=media&token=31b50c1e-c030-43a7-9eed-a9543f30b51d",
                            IngredientTypeId = 5,
                            IsDelete = false,
                            MeasurementValue = 300.0,
                            MinStockLevel = 15,
                            Name = "Đậu Phụ Cứng",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 14,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5168),
                            Description = "Đậu phụ chiên giòn hấp thụ hương vị nước lẩu.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/fried-tofu.png?alt=media&token=e645c47c-95f5-4a45-9407-4d99464e0023",
                            IngredientTypeId = 5,
                            IsDelete = false,
                            MeasurementValue = 250.0,
                            MinStockLevel = 15,
                            Name = "Đậu Phụ Chiên",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 15,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5170),
                            Description = "Nấm hương thơm ngon, tươi hoặc khô.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/mnam-huong.png?alt=media&token=f6e2ec47-ad19-4688-b20b-ffba6ae5fd7a",
                            IngredientTypeId = 6,
                            IsDelete = false,
                            MeasurementValue = 200.0,
                            MinStockLevel = 15,
                            Name = "Nấm Hương",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 16,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5171),
                            Description = "Nấm kim châm mỏng, thân dài.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/nam-kim-cham.png?alt=media&token=060215f1-02b2-402e-83e4-ba93d2535928",
                            IngredientTypeId = 6,
                            IsDelete = false,
                            MeasurementValue = 150.0,
                            MinStockLevel = 15,
                            Name = "Nấm Kim Châm",
                            Unit = "g"
                        },
                        new
                        {
                            IngredientId = 17,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5172),
                            Description = "Nước lẩu cay truyền thống với hạt tiêu Tứ Xuyên và dầu ớt.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/lau-tu-xuyen-cay.png?alt=media&token=cb8f5064-ee26-499b-8fe9-f3f4a6adc473",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MeasurementValue = 500.0,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Tứ Xuyên Cay",
                            Unit = "ml"
                        },
                        new
                        {
                            IngredientId = 18,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5173),
                            Description = "Nước lẩu cà chua chua ngọt.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/lau-ca-chua.png?alt=media&token=8fcf88b3-6128-4689-aab0-e64a48ce8b5a",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MeasurementValue = 500.0,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Cà Chua",
                            Unit = "ml"
                        },
                        new
                        {
                            IngredientId = 19,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5175),
                            Description = "Nước lẩu đậm đà làm từ nhiều loại nấm.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/lau-nam.jpg?alt=media&token=d2080167-804c-4909-9bef-1d7e8e7dcfdc",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MeasurementValue = 500.0,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Nấm",
                            Unit = "ml"
                        },
                        new
                        {
                            IngredientId = 20,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5176),
                            Description = "Nước lẩu nhẹ, trong làm từ xương hầm nhiều giờ.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/lau-xuong-trong.jpg?alt=media&token=49407a13-5f3e-47a0-8126-bab93c157b69",
                            IngredientTypeId = 1,
                            IsDelete = false,
                            MeasurementValue = 500.0,
                            MinStockLevel = 10,
                            Name = "Nước Lẩu Xương Trong",
                            Unit = "ml"
                        },
                        new
                        {
                            IngredientId = 21,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5177),
                            Description = "Sốt kem làm từ hạt mè xay.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/sot-me.jpg?alt=media&token=560bf6c4-26fb-4adb-b543-308089fd0e40",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MeasurementValue = 200.0,
                            MinStockLevel = 10,
                            Name = "Sốt Mè",
                            Unit = "ml"
                        },
                        new
                        {
                            IngredientId = 22,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5178),
                            Description = "Nước tương pha với tỏi băm.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/sot-tuong-toi.png?alt=media&token=fe07fff2-694d-420f-aea0-9bd6723f0798",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MeasurementValue = 250.0,
                            MinStockLevel = 10,
                            Name = "Nước Tương Tỏi",
                            Unit = "ml"
                        },
                        new
                        {
                            IngredientId = 23,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5180),
                            Description = "Dầu cay làm từ ớt ngâm dầu.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/dau-ot.png?alt=media&token=0ed694a6-cdfe-4a7a-b788-8f679ab5a86f",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MeasurementValue = 150.0,
                            MinStockLevel = 10,
                            Name = "Dầu Ớt",
                            Unit = "ml"
                        },
                        new
                        {
                            IngredientId = 24,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5181),
                            Description = "Sốt đậm đà làm từ dầu đậu nành, tỏi, hành và hải sản khô.",
                            ImageURL = "https://firebasestorage.googleapis.com/v0/b/foodshop-aa498.appspot.com/o/sot-sa-te.png?alt=media&token=fae51735-1dc5-4fb2-b950-27163f9eebdc",
                            IngredientTypeId = 8,
                            IsDelete = false,
                            MeasurementValue = 200.0,
                            MinStockLevel = 10,
                            Name = "Tương Sa Tế",
                            Unit = "ml"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientBatch", b =>
                {
                    b.Property<int>("IngredientBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientBatchId"));

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BestBeforeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ProvideCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientBatchId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientBatchs");

                    b.HasData(
                        new
                        {
                            IngredientBatchId = 1,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 19, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5603),
                            IngredientId = 1,
                            InitialQuantity = 50,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 50
                        },
                        new
                        {
                            IngredientBatchId = 2,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 26, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5606),
                            IngredientId = 1,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 4, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        },
                        new
                        {
                            IngredientBatchId = 3,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 19, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5614),
                            IngredientId = 2,
                            InitialQuantity = 40,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 40
                        },
                        new
                        {
                            IngredientBatchId = 4,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 15, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5616),
                            IngredientId = 3,
                            InitialQuantity = 45,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 45
                        },
                        new
                        {
                            IngredientBatchId = 5,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 12, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5618),
                            IngredientId = 4,
                            InitialQuantity = 35,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 35
                        },
                        new
                        {
                            IngredientBatchId = 6,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 7, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5620),
                            IngredientId = 5,
                            InitialQuantity = 60,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 60
                        },
                        new
                        {
                            IngredientBatchId = 7,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 12, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5621),
                            IngredientId = 6,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        },
                        new
                        {
                            IngredientBatchId = 8,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 10, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5623),
                            IngredientId = 7,
                            InitialQuantity = 40,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 4, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 40
                        },
                        new
                        {
                            IngredientBatchId = 9,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 9, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5624),
                            IngredientId = 8,
                            InitialQuantity = 35,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 4, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 35
                        },
                        new
                        {
                            IngredientBatchId = 10,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 12, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5626),
                            IngredientId = 9,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        },
                        new
                        {
                            IngredientBatchId = 11,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 8, 4, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5628),
                            IngredientId = 10,
                            InitialQuantity = 50,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 31, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 50
                        },
                        new
                        {
                            IngredientBatchId = 12,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 9, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5629),
                            IngredientId = 11,
                            InitialQuantity = 45,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 31, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 45
                        },
                        new
                        {
                            IngredientBatchId = 13,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 8, 4, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5631),
                            IngredientId = 12,
                            InitialQuantity = 55,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 31, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 55
                        },
                        new
                        {
                            IngredientBatchId = 14,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 12, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5632),
                            IngredientId = 13,
                            InitialQuantity = 40,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 40
                        },
                        new
                        {
                            IngredientBatchId = 15,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 19, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5634),
                            IngredientId = 14,
                            InitialQuantity = 35,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 35
                        },
                        new
                        {
                            IngredientBatchId = 16,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 15, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5635),
                            IngredientId = 15,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        },
                        new
                        {
                            IngredientBatchId = 17,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 6, 12, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5637),
                            IngredientId = 16,
                            InitialQuantity = 35,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 6, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 35
                        },
                        new
                        {
                            IngredientBatchId = 18,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 7, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5638),
                            IngredientId = 17,
                            InitialQuantity = 25,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 31, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 25
                        },
                        new
                        {
                            IngredientBatchId = 19,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 7, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5640),
                            IngredientId = 18,
                            InitialQuantity = 25,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 31, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 25
                        },
                        new
                        {
                            IngredientBatchId = 20,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 7, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5642),
                            IngredientId = 19,
                            InitialQuantity = 25,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 31, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 25
                        },
                        new
                        {
                            IngredientBatchId = 21,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 7, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5643),
                            IngredientId = 20,
                            InitialQuantity = 25,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 31, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 25
                        },
                        new
                        {
                            IngredientBatchId = 22,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 9, 3, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5645),
                            IngredientId = 21,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 26, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        },
                        new
                        {
                            IngredientBatchId = 23,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 12, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5646),
                            IngredientId = 22,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 26, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        },
                        new
                        {
                            IngredientBatchId = 24,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 12, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5648),
                            IngredientId = 23,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 26, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        },
                        new
                        {
                            IngredientBatchId = 25,
                            BatchNumber = "BATCH-20250605091412",
                            BestBeforeDate = new DateTime(2025, 12, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5649),
                            IngredientId = 24,
                            InitialQuantity = 30,
                            IsDelete = false,
                            ProvideCompany = "FPT",
                            ReceivedDate = new DateTime(2025, 5, 26, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5337),
                            RemainingQuantity = 30
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.Property<int>("IngredientPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientPriceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientPriceId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientPrices");

                    b.HasData(
                        new
                        {
                            IngredientPriceId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5261),
                            EffectiveDate = new DateTime(2025, 5, 6, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5264),
                            IngredientId = 1,
                            IsDelete = false,
                            Price = 120000m
                        },
                        new
                        {
                            IngredientPriceId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5271),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5272),
                            IngredientId = 1,
                            IsDelete = false,
                            Price = 135000m
                        },
                        new
                        {
                            IngredientPriceId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5273),
                            EffectiveDate = new DateTime(2025, 5, 6, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5274),
                            IngredientId = 2,
                            IsDelete = false,
                            Price = 150000m
                        },
                        new
                        {
                            IngredientPriceId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5275),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5275),
                            IngredientId = 2,
                            IsDelete = false,
                            Price = 165000m
                        },
                        new
                        {
                            IngredientPriceId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5276),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5277),
                            IngredientId = 3,
                            IsDelete = false,
                            Price = 95000m
                        },
                        new
                        {
                            IngredientPriceId = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5278),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5278),
                            IngredientId = 4,
                            IsDelete = false,
                            Price = 110000m
                        },
                        new
                        {
                            IngredientPriceId = 7,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5279),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5280),
                            IngredientId = 5,
                            IsDelete = false,
                            Price = 75000m
                        },
                        new
                        {
                            IngredientPriceId = 8,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5280),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5281),
                            IngredientId = 6,
                            IsDelete = false,
                            Price = 90000m
                        },
                        new
                        {
                            IngredientPriceId = 9,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5282),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5282),
                            IngredientId = 7,
                            IsDelete = false,
                            Price = 25000m
                        },
                        new
                        {
                            IngredientPriceId = 10,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5283),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5284),
                            IngredientId = 8,
                            IsDelete = false,
                            Price = 20000m
                        },
                        new
                        {
                            IngredientPriceId = 11,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5285),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5285),
                            IngredientId = 9,
                            IsDelete = false,
                            Price = 18000m
                        },
                        new
                        {
                            IngredientPriceId = 12,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5286),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5287),
                            IngredientId = 10,
                            IsDelete = false,
                            Price = 35000m
                        },
                        new
                        {
                            IngredientPriceId = 13,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5287),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5288),
                            IngredientId = 11,
                            IsDelete = false,
                            Price = 30000m
                        },
                        new
                        {
                            IngredientPriceId = 14,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5289),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5289),
                            IngredientId = 12,
                            IsDelete = false,
                            Price = 32000m
                        },
                        new
                        {
                            IngredientPriceId = 15,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5290),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5295),
                            IngredientId = 13,
                            IsDelete = false,
                            Price = 22000m
                        },
                        new
                        {
                            IngredientPriceId = 16,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5296),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5296),
                            IngredientId = 14,
                            IsDelete = false,
                            Price = 25000m
                        },
                        new
                        {
                            IngredientPriceId = 17,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5297),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5298),
                            IngredientId = 15,
                            IsDelete = false,
                            Price = 45000m
                        },
                        new
                        {
                            IngredientPriceId = 18,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5299),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5299),
                            IngredientId = 16,
                            IsDelete = false,
                            Price = 35000m
                        },
                        new
                        {
                            IngredientPriceId = 19,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5300),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5301),
                            IngredientId = 17,
                            IsDelete = false,
                            Price = 65000m
                        },
                        new
                        {
                            IngredientPriceId = 20,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5301),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5302),
                            IngredientId = 18,
                            IsDelete = false,
                            Price = 55000m
                        },
                        new
                        {
                            IngredientPriceId = 21,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5303),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5303),
                            IngredientId = 19,
                            IsDelete = false,
                            Price = 60000m
                        },
                        new
                        {
                            IngredientPriceId = 22,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5304),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5305),
                            IngredientId = 20,
                            IsDelete = false,
                            Price = 50000m
                        },
                        new
                        {
                            IngredientPriceId = 23,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5306),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5306),
                            IngredientId = 21,
                            IsDelete = false,
                            Price = 40000m
                        },
                        new
                        {
                            IngredientPriceId = 24,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5307),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5308),
                            IngredientId = 22,
                            IsDelete = false,
                            Price = 35000m
                        },
                        new
                        {
                            IngredientPriceId = 25,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5308),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5309),
                            IngredientId = 23,
                            IsDelete = false,
                            Price = 38000m
                        },
                        new
                        {
                            IngredientPriceId = 26,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5310),
                            EffectiveDate = new DateTime(2025, 6, 2, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5311),
                            IngredientId = 24,
                            IsDelete = false,
                            Price = 42000m
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Property<int>("IngredientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientTypeId");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            IngredientTypeId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5060),
                            IsDelete = false,
                            Name = "Nước Lẩu"
                        },
                        new
                        {
                            IngredientTypeId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5062),
                            IsDelete = false,
                            Name = "Hải Sản"
                        },
                        new
                        {
                            IngredientTypeId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5063),
                            IsDelete = false,
                            Name = "Rau Củ"
                        },
                        new
                        {
                            IngredientTypeId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5063),
                            IsDelete = false,
                            Name = "Mì"
                        },
                        new
                        {
                            IngredientTypeId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5064),
                            IsDelete = false,
                            Name = "Đậu Phụ"
                        },
                        new
                        {
                            IngredientTypeId = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5065),
                            IsDelete = false,
                            Name = "Nấm"
                        },
                        new
                        {
                            IngredientTypeId = 7,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5065),
                            IsDelete = false,
                            Name = "Thịt"
                        },
                        new
                        {
                            IngredientTypeId = 8,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5066),
                            IsDelete = false,
                            Name = "Nước Chấm"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientUsage", b =>
                {
                    b.Property<int>("IngredientUsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientUsageId"));

                    b.Property<int?>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomizationId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientBatchId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IngredientUsageId");

                    b.HasIndex("ComboId");

                    b.HasIndex("CustomizationId");

                    b.HasIndex("IngredientBatchId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("IngredientUsages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TargetType", "TargetId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("HasRentItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasSellItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PreparationStaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("PreparationStaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionCode")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.PaymentReceipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceiptId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("PaymentReceipts");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DamageFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpectedReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderSize")
                        .HasColumnType("int");

                    b.Property<string>("RentalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnCondition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VehicleAssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("VehicleReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RentOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrderDetail", b =>
                {
                    b.Property<int>("RentOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentOrderDetailId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HotpotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RentOrderDetailId");

                    b.HasIndex("HotpotInventoryId");

                    b.HasIndex("OrderId");

                    b.ToTable("RentOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ReplacementRequest", b =>
                {
                    b.Property<int>("ReplacementRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplacementRequestId"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AssignedStaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DamageDeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("HotPotInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReplacementRequestId");

                    b.HasIndex("AssignedStaffId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DamageDeviceId");

                    b.HasIndex("HotPotInventoryId");

                    b.ToTable("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 9, 588, DateTimeKind.Utc).AddTicks(1772),
                            IsDelete = false,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 9, 588, DateTimeKind.Utc).AddTicks(1780),
                            IsDelete = false,
                            Name = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 9, 588, DateTimeKind.Utc).AddTicks(1780),
                            IsDelete = false,
                            Name = "Staff"
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 9, 588, DateTimeKind.Utc).AddTicks(1781),
                            IsDelete = false,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("SellOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrderDetail", b =>
                {
                    b.Property<int>("SellOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellOrderDetailId"));

                    b.Property<int?>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomizationId")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UtensilId")
                        .HasColumnType("int");

                    b.HasKey("SellOrderDetailId");

                    b.HasIndex("ComboId");

                    b.HasIndex("CustomizationId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UtensilId");

                    b.ToTable("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.Property<int>("ShippingOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingOrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderSize")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("ShippingOrderId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", b =>
                {
                    b.Property<int>("SizeDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeDiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SizeDiscountId");

                    b.ToTable("SizeDiscounts");

                    b.HasData(
                        new
                        {
                            SizeDiscountId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5863),
                            DiscountPercentage = 4.00m,
                            IsDelete = false,
                            MinSize = 2,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5865)
                        },
                        new
                        {
                            SizeDiscountId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5868),
                            DiscountPercentage = 6.00m,
                            IsDelete = false,
                            MinSize = 4,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5869)
                        },
                        new
                        {
                            SizeDiscountId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5871),
                            DiscountPercentage = 8.00m,
                            IsDelete = false,
                            MinSize = 6,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5872)
                        },
                        new
                        {
                            SizeDiscountId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5874),
                            DiscountPercentage = 10.00m,
                            IsDelete = false,
                            MinSize = 8,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5874)
                        },
                        new
                        {
                            SizeDiscountId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5877),
                            DiscountPercentage = 12.00m,
                            IsDelete = false,
                            MinSize = 10,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5877)
                        },
                        new
                        {
                            SizeDiscountId = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5879),
                            DiscountPercentage = 15.00m,
                            IsDelete = false,
                            MinSize = 15,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5880)
                        },
                        new
                        {
                            SizeDiscountId = 7,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5882),
                            DiscountPercentage = 20.00m,
                            IsDelete = false,
                            MinSize = 20,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5882)
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.StaffAssignment", b =>
                {
                    b.Property<int>("StaffAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffAssignmentId"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("TaskType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffAssignmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffAssignments");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Property<int>("TurtorialVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurtorialVideoId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("TurtorialVideoId");

                    b.ToTable("TurtorialVideos");

                    b.HasData(
                        new
                        {
                            TurtorialVideoId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3912),
                            Description = "Hướng dẫn toàn diện về cách thiết lập và sử dụng nồi lẩu truyền thống.",
                            IsDelete = false,
                            Name = "Cách Sử Dụng Nồi Lẩu Truyền Thống",
                            VideoURL = "https://www.youtube.com/watch?v=traditional-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3917),
                            Description = "Học cách thiết lập và sử dụng nồi lẩu điện an toàn.",
                            IsDelete = false,
                            Name = "Hướng Dẫn Thiết Lập Nồi Lẩu Điện",
                            VideoURL = "https://www.youtube.com/watch?v=electric-hotpot-setup"
                        },
                        new
                        {
                            TurtorialVideoId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3918),
                            Description = "Mẹo và thủ thuật để sử dụng nồi lẩu di động ở bất kỳ đâu.",
                            IsDelete = false,
                            Name = "Nồi Lẩu Di Động Mọi Lúc Mọi Nơi",
                            VideoURL = "https://www.youtube.com/watch?v=portable-hotpot-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3919),
                            Description = "Cách sử dụng hiệu quả tất cả các ngăn trong nồi lẩu đa ngăn của bạn.",
                            IsDelete = false,
                            Name = "Làm Chủ Nồi Lẩu Đa Ngăn",
                            VideoURL = "https://www.youtube.com/watch?v=multi-compartment-guide"
                        },
                        new
                        {
                            TurtorialVideoId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3920),
                            Description = "Học cách chăm sóc và bảo quản nồi lẩu gốm đúng cách.",
                            IsDelete = false,
                            Name = "Hướng Dẫn Chăm Sóc Nồi Lẩu Gốm",
                            VideoURL = "https://www.youtube.com/watch?v=ceramic-hotpot-care"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double?>("LoyatyPoint")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkDays")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 9, 588, DateTimeKind.Utc).AddTicks(1936),
                            Email = "Admin@gmail.com",
                            IsDelete = false,
                            Name = "Owner",
                            Password = "$2a$12$1SXiy9CSz7XSTbvDHbuX1.Yo7eyxOkdO7yFmI2KreD241nk/AI7cm",
                            PhoneNumber = "987654321",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 9, 828, DateTimeKind.Utc).AddTicks(9838),
                            Email = "Manager1@gmail.com",
                            IsDelete = false,
                            Name = "Nguyễn Văn Quân",
                            Password = "$2a$12$Uw8ZtAiixQooxaDaMpK7N.sW0ri5OfqENV/bUWBBtr09bIeI5a.OG",
                            PhoneNumber = "999999999",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 10, 69, DateTimeKind.Utc).AddTicks(575),
                            Email = "Manager2@gmail.com",
                            IsDelete = false,
                            Name = "Trần Thị Thu",
                            Password = "$2a$12$l7bK4gpV6LW0RwR4tnTXl.3iRwaansBASYYed7/RyaC7zwOmC9Dx2",
                            PhoneNumber = "888888888",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 10, 309, DateTimeKind.Utc).AddTicks(7350),
                            Email = "Staff1@gmail.com",
                            IsDelete = false,
                            Name = "Lê Minh Hoàng",
                            Password = "$2a$12$H7QuvuQQMLSHeY38WFzd0.gcThYa/OkHlXpuX0r2hbF/R2x.QwhLe",
                            PhoneNumber = "777777777",
                            RoleId = 3,
                            StaffType = 1,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 10, 547, DateTimeKind.Utc).AddTicks(6681),
                            Email = "Staff2@gmail.com",
                            IsDelete = false,
                            Name = "Phạm Thị Hằng",
                            Password = "$2a$12$mLyg1qul3OrruHfOlnabNuIeZcuhFYjfMUQr65xLmQCmhY46K9SMu",
                            PhoneNumber = "666666666",
                            RoleId = 3,
                            StaffType = 1,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 10, 785, DateTimeKind.Utc).AddTicks(9320),
                            Email = "Staff3@gmail.com",
                            IsDelete = false,
                            Name = "Ngô Văn Cường",
                            Password = "$2a$12$q6iIe4rgASl7.rL//3oEAOL2MCiIDCVgDKo3f2bsc7ZZdZEJmTbEa",
                            PhoneNumber = "555555555",
                            RoleId = 3,
                            StaffType = 2,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 7,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 11, 23, DateTimeKind.Utc).AddTicks(5845),
                            Email = "Staff4@gmail.com",
                            IsDelete = false,
                            Name = "Đinh Thị Hà",
                            Password = "$2a$12$dW4zy30hS9obRggeMfmh7ul8edAe8CaK68qbJyD3ey6FvmR2Bsv2K",
                            PhoneNumber = "444444444",
                            RoleId = 3,
                            StaffType = 2,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 18,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 11, 263, DateTimeKind.Utc).AddTicks(5210),
                            Email = "Staff5@gmail.com",
                            IsDelete = false,
                            Name = "Võ Anh Dũng",
                            Password = "$2a$12$LET25pV292qOUvEPKv3zRO1bUGsUUV31f3CvcdRKOqhov11iOpRyq",
                            PhoneNumber = "901234567",
                            RoleId = 3,
                            StaffType = 1,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 19,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 11, 506, DateTimeKind.Utc).AddTicks(1761),
                            Email = "Staff6@gmail.com",
                            IsDelete = false,
                            Name = "Nguyễn Thị Mai",
                            Password = "$2a$12$w6OnWqv2O5N35R9GV6X0zuRlJMQJok6Ch2PIB9X6kpKkBxb5hCF5C",
                            PhoneNumber = "907654321",
                            RoleId = 3,
                            StaffType = 1,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 20,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 11, 746, DateTimeKind.Utc).AddTicks(2058),
                            Email = "Staff7@gmail.com",
                            IsDelete = false,
                            Name = "Bùi Văn Hậu",
                            Password = "$2a$12$O06ebGhSegA./ImsIcgWIuTi3w24OhGb7aHtzXgIWzC1OqDL3wW7C",
                            PhoneNumber = "912345678",
                            RoleId = 3,
                            StaffType = 2,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 21,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 11, 984, DateTimeKind.Utc).AddTicks(4217),
                            Email = "Staff8@gmail.com",
                            IsDelete = false,
                            Name = "Trương Thị Lan",
                            Password = "$2a$12$j/bYwCpWAKtZzb1.xa4AQ.kCw9O40eULwY5OSRK4Me9BXt.bIL6S2",
                            PhoneNumber = "918765432",
                            RoleId = 3,
                            StaffType = 2,
                            WorkDays = 127
                        },
                        new
                        {
                            UserId = 8,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 222, DateTimeKind.Utc).AddTicks(2962),
                            Email = "Customer1@gmail.com",
                            IsDelete = false,
                            Name = "Đặng Văn Nam",
                            Password = "$2a$12$zAoFXRe1LmQ1iSAgonGa7OflE7sni63B9XITVyVJIkJLIQP9UKZr6",
                            PhoneNumber = "333333333",
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 460, DateTimeKind.Utc).AddTicks(5483),
                            Email = "Customer2@gmail.com",
                            IsDelete = false,
                            Name = "Lý Thị Ngọc",
                            Password = "$2a$12$FiQfy6bvqg3tEq5qgg55BuMjs5VV9wf2mZal4W2jEH7/WILZPF7ki",
                            PhoneNumber = "222222222",
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 10,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 702, DateTimeKind.Utc).AddTicks(4100),
                            Email = "Customer3@gmail.com",
                            IsDelete = false,
                            LoyatyPoint = 200.0,
                            Name = "Phan Minh Đức",
                            Password = "$2a$12$qdQKyOJ9J5oDVP8Ysupmoutys7sk4ag3VIkWc.QA4LJw3/huJX4xi",
                            PhoneNumber = "111111111",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UserNotification", b =>
                {
                    b.Property<int>("UserNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserNotificationId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Property<int>("UtensilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMaintainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UtensilTypeId")
                        .HasColumnType("int");

                    b.HasKey("UtensilId");

                    b.HasIndex("UtensilTypeId");

                    b.ToTable("Utensils");

                    b.HasData(
                        new
                        {
                            UtensilId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5001),
                            Description = "Bộ 5 đôi đũa tre truyền thống.",
                            ImageURL = "https://example.com/images/bamboo-chopsticks.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5001),
                            Material = "Tre",
                            Name = "Bộ Đũa Tre",
                            Price = 320000m,
                            Quantity = 100,
                            Status = true,
                            UtensilTypeId = 1
                        },
                        new
                        {
                            UtensilId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5009),
                            Description = "Muỗng thép không gỉ bền chắc để múc nước lẩu.",
                            ImageURL = "https://example.com/images/steel-ladle.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5010),
                            Material = "Thép Không Gỉ",
                            Name = "Muỗng Lẩu Thép Không Gỉ",
                            Price = 245000m,
                            Quantity = 75,
                            Status = true,
                            UtensilTypeId = 2
                        },
                        new
                        {
                            UtensilId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5012),
                            Description = "Vợt lưới mịn để vớt thức ăn từ nồi lẩu.",
                            ImageURL = "https://example.com/images/mesh-strainer.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5012),
                            Material = "Thép Không Gỉ",
                            Name = "Vợt Lưới Kim Loại",
                            Price = 195000m,
                            Quantity = 80,
                            Status = true,
                            UtensilTypeId = 3
                        },
                        new
                        {
                            UtensilId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5014),
                            Description = "Bộ 4 bát gốm cho phần ăn cá nhân.",
                            ImageURL = "https://example.com/images/ceramic-bowls.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5015),
                            Material = "Gốm",
                            Name = "Bộ Bát Ăn Gốm",
                            Price = 490000m,
                            Quantity = 50,
                            Status = true,
                            UtensilTypeId = 4
                        },
                        new
                        {
                            UtensilId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5017),
                            Description = "Bộ 6 đĩa melamine bền chắc cho bữa ăn lẩu.",
                            ImageURL = "https://example.com/images/melamine-plates.jpg",
                            IsDelete = false,
                            LastMaintainDate = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5017),
                            Material = "Melamine",
                            Name = "Đĩa Melamine",
                            Price = 610000m,
                            Quantity = 60,
                            Status = true,
                            UtensilTypeId = 5
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Property<int>("UtensilTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtensilTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UtensilTypeId");

                    b.ToTable("UtensilTypes");

                    b.HasData(
                        new
                        {
                            UtensilTypeId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3841),
                            IsDelete = false,
                            Name = "Đũa"
                        },
                        new
                        {
                            UtensilTypeId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3847),
                            IsDelete = false,
                            Name = "Muôi"
                        },
                        new
                        {
                            UtensilTypeId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3848),
                            IsDelete = false,
                            Name = "Vợt"
                        },
                        new
                        {
                            UtensilTypeId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3849),
                            IsDelete = false,
                            Name = "Bát"
                        },
                        new
                        {
                            UtensilTypeId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(3849),
                            IsDelete = false,
                            Name = "Đĩa"
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5950),
                            IsDelete = false,
                            LicensePlate = "59P1-12345",
                            Name = "Honda Wave Alpha",
                            Notes = "Xe máy giao hàng tiêu chuẩn, màu xanh dương, đã được bảo dưỡng tháng 3/2025",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5951)
                        },
                        new
                        {
                            VehicleId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5953),
                            IsDelete = false,
                            LicensePlate = "59P2-23456",
                            Name = "Yamaha Sirius",
                            Notes = "Xe máy giao hàng nhanh, màu đỏ, tiết kiệm nhiên liệu",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5953)
                        },
                        new
                        {
                            VehicleId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5956),
                            IsDelete = false,
                            LicensePlate = "59P2-34567",
                            Name = "Honda Vision",
                            Notes = "Xe tay ga dành cho đơn hàng nhỏ, màu trắng, có thùng hàng 60L",
                            Status = 2,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5956)
                        },
                        new
                        {
                            VehicleId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5958),
                            IsDelete = false,
                            LicensePlate = "59P3-45678",
                            Name = "Suzuki Raider",
                            Notes = "Xe máy giao hàng tốc độ cao, phù hợp cho đơn hàng khẩn cấp",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5958)
                        },
                        new
                        {
                            VehicleId = 5,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5960),
                            IsDelete = false,
                            LicensePlate = "51A-12345",
                            Name = "Toyota Vios",
                            Notes = "Xe ô tô 4 chỗ, phù hợp cho đơn hàng lớn hoặc khoảng cách xa",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5961)
                        },
                        new
                        {
                            VehicleId = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5962),
                            IsDelete = false,
                            LicensePlate = "51A-23456",
                            Name = "Mitsubishi Xpander",
                            Notes = "Xe ô tô 7 chỗ, đang trong quá trình bảo dưỡng định kỳ, sẽ sẵn sàng vào 25/04/2025",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5963)
                        },
                        new
                        {
                            VehicleId = 7,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5965),
                            IsDelete = false,
                            LicensePlate = "59P3-56789",
                            Name = "Honda SH Mode",
                            Notes = "Xe tay ga cao cấp, phù hợp cho giao hàng trong khu vực trung tâm thành phố",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5965)
                        },
                        new
                        {
                            VehicleId = 8,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5967),
                            IsDelete = false,
                            LicensePlate = "51A-34567",
                            Name = "Ford Ranger",
                            Notes = "Xe bán tải, phù hợp cho vận chuyển hàng hóa lớn và đường xa",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5968)
                        },
                        new
                        {
                            VehicleId = 9,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5970),
                            IsDelete = false,
                            LicensePlate = "59P4-67890",
                            Name = "Piaggio Vespa",
                            Notes = "Xe tay ga phong cách Ý, phù hợp cho giao hàng cao cấp",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5970)
                        },
                        new
                        {
                            VehicleId = 10,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5972),
                            IsDelete = false,
                            LicensePlate = "51A-45678",
                            Name = "Hyundai Accent",
                            Notes = "Xe sedan 4 chỗ, tiết kiệm nhiên liệu, phù hợp cho giao hàng khoảng cách xa",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5972)
                        },
                        new
                        {
                            VehicleId = 11,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5974),
                            IsDelete = false,
                            LicensePlate = "51A-56789",
                            Name = "Kia Morning",
                            Notes = "Xe nhỏ gọn, di chuyển linh hoạt trong nội thành",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5975)
                        },
                        new
                        {
                            VehicleId = 12,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5976),
                            IsDelete = false,
                            LicensePlate = "59P5-12345",
                            Name = "SYM Elegant",
                            Notes = "Xe số tiết kiệm nhiên liệu, dễ bảo trì",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5977)
                        },
                        new
                        {
                            VehicleId = 13,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5979),
                            IsDelete = false,
                            LicensePlate = "51H-67890",
                            Name = "Mazda CX-5",
                            Notes = "Xe SUV 5 chỗ, phù hợp vận chuyển hàng hóa trong điều kiện thời tiết xấu",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5979)
                        },
                        new
                        {
                            VehicleId = 14,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5981),
                            IsDelete = false,
                            LicensePlate = "59P6-23456",
                            Name = "Yamaha Janus",
                            Notes = "Xe tay ga tiết kiệm nhiên liệu, nhẹ và dễ lái",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5981)
                        },
                        new
                        {
                            VehicleId = 15,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5983),
                            IsDelete = false,
                            LicensePlate = "59P6-34567",
                            Name = "Honda Air Blade",
                            Notes = "Xe tay ga mạnh mẽ, thích hợp giao hàng ngoài giờ cao điểm",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5984)
                        },
                        new
                        {
                            VehicleId = 16,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5986),
                            IsDelete = false,
                            LicensePlate = "59X1-45678",
                            Name = "VinFast Klara",
                            Notes = "Xe máy điện thân thiện môi trường, hoạt động tốt trong thành phố",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5986)
                        },
                        new
                        {
                            VehicleId = 17,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5992),
                            IsDelete = false,
                            LicensePlate = "51G-78901",
                            Name = "Chevrolet Spark",
                            Notes = "Xe nhỏ gọn 4 chỗ, phù hợp giao hàng trong khu dân cư đông đúc",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(5992)
                        },
                        new
                        {
                            VehicleId = 18,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6058),
                            IsDelete = false,
                            LicensePlate = "51A-89012",
                            Name = "Hyundai Grand i10",
                            Notes = "Xe hatchback nhỏ gọn, dễ dàng đỗ xe và di chuyển",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6058)
                        },
                        new
                        {
                            VehicleId = 19,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6060),
                            IsDelete = false,
                            LicensePlate = "51C-34567",
                            Name = "Suzuki Carry Truck",
                            Notes = "Xe tải nhẹ chuyên dùng giao hàng cồng kềnh trong thành phố",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6061)
                        },
                        new
                        {
                            VehicleId = 20,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6063),
                            IsDelete = false,
                            LicensePlate = "59P7-56789",
                            Name = "Yamaha Exciter",
                            Notes = "Xe số phân khối lớn, phù hợp cho giao hàng nhanh và xa",
                            Status = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6063)
                        },
                        new
                        {
                            VehicleId = 21,
                            CreatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6065),
                            IsDelete = false,
                            LicensePlate = "60F3-56874",
                            Name = "Ferrari La Ferrari",
                            Notes = "Siêu xe, lái cho vui :))",
                            Status = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2025, 6, 5, 9, 14, 12, 945, DateTimeKind.Utc).AddTicks(6065)
                        });
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.WorkShift", b =>
                {
                    b.Property<int>("WorkShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkShiftId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("ShiftEndTime")
                        .HasColumnType("time");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("ShiftStartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkShiftId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("UserWorkShift", b =>
                {
                    b.Property<int>("ManagersUserId")
                        .HasColumnType("int");

                    b.Property<int>("MangerWorkShiftsWorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("ManagersUserId", "MangerWorkShiftsWorkShiftId");

                    b.HasIndex("MangerWorkShiftsWorkShiftId");

                    b.ToTable("UserManagerWorkShifts", (string)null);
                });

            modelBuilder.Entity("UserWorkShift1", b =>
                {
                    b.Property<int>("StaffUserId")
                        .HasColumnType("int");

                    b.Property<int>("StaffWorkShiftsWorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("StaffUserId", "StaffWorkShiftsWorkShiftId");

                    b.HasIndex("StaffWorkShiftsWorkShiftId");

                    b.ToTable("UserStaffWorkShifts", (string)null);
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatMessage", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.ChatSession", "ChatSession")
                        .WithMany("Messages")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatSession");

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", "AppliedDiscount")
                        .WithMany("Combos")
                        .HasForeignKey("AppliedDiscountId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", "TurtorialVideo")
                        .WithMany("Combo")
                        .HasForeignKey("TurtorialVideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppliedDiscount");

                    b.Navigation("TurtorialVideo");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboAllowedIngredientType", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("AllowedIngredientTypes")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ComboIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("ComboIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", "AppliedDiscount")
                        .WithMany("Customizations")
                        .HasForeignKey("AppliedDiscountId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("Customizations")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Customizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppliedDiscount");

                    b.Navigation("Combo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.CustomizationIngredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("CustomizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("CustomizationIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customization");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.DamageDevice", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotPotInventory")
                        .WithMany("ConditionLogs")
                        .HasForeignKey("HotPotInventoryId");

                    b.Navigation("HotPotInventory");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Hotpot", "Hotpot")
                        .WithMany("InventoryUnits")
                        .HasForeignKey("HotpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotpot");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientType", "IngredientType")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientBatch", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientBatches")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientPrice", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientPrices")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientUsage", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithMany()
                        .HasForeignKey("CustomizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.IngredientBatch", "IngredientBatch")
                        .WithMany()
                        .HasForeignKey("IngredientBatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SellOrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Customization");

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientBatch");

                    b.Navigation("Order");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "PreparationStaff")
                        .WithMany("PreparedOrders")
                        .HasForeignKey("PreparationStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("PreparationStaff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.PaymentReceipt", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Payment", "Payment")
                        .WithOne("Receipt")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.PaymentReceipt", "PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("RentOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.RentOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Order");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrderDetail", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotpotInventory")
                        .WithMany("RentOrderDetails")
                        .HasForeignKey("HotpotInventoryId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.RentOrder", "RentOrder")
                        .WithMany("RentOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotpotInventory");

                    b.Navigation("RentOrder");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ReplacementRequest", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "AssignedStaff")
                        .WithMany("StaffReplacementRequests")
                        .HasForeignKey("AssignedStaffId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Customer")
                        .WithMany("CustomerReplacementRequests")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.DamageDevice", "ConditionLog")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("DamageDeviceId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", "HotPotInventory")
                        .WithMany("ReplacementRequests")
                        .HasForeignKey("HotPotInventoryId");

                    b.Navigation("AssignedStaff");

                    b.Navigation("ConditionLog");

                    b.Navigation("Customer");

                    b.Navigation("HotPotInventory");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("SellOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.SellOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrderDetail", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Combo", "Combo")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("ComboId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Customization", "Customization")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("CustomizationId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Ingredient", "Ingredient")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.SellOrder", "SellOrder")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Utensil", "Utensil")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("UtensilId");

                    b.Navigation("Combo");

                    b.Navigation("Customization");

                    b.Navigation("Ingredient");

                    b.Navigation("SellOrder");

                    b.Navigation("Utensil");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("ShippingOrder")
                        .HasForeignKey("Capstone.HPTY.ModelLayer.Entities.ShippingOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Staff")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Vehicle", "Vehicle")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Order");

                    b.Navigation("Staff");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.StaffAssignment", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Manager")
                        .WithMany("ManagedAssignments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithMany("StaffAssignments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Staff")
                        .WithMany("StaffAssignments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UserNotification", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.UtensilType", "UtensilType")
                        .WithMany("Utensils")
                        .HasForeignKey("UtensilTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UtensilType");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.Order", "Order")
                        .WithOne("Feedback")
                        .HasForeignKey("Feedback", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserWorkShift", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ManagersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("MangerWorkShiftsWorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserWorkShift1", b =>
                {
                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("StaffUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.HPTY.ModelLayer.Entities.WorkShift", null)
                        .WithMany()
                        .HasForeignKey("StaffWorkShiftsWorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Combo", b =>
                {
                    b.Navigation("AllowedIngredientTypes");

                    b.Navigation("ComboIngredients");

                    b.Navigation("Customizations");

                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Customization", b =>
                {
                    b.Navigation("CustomizationIngredients");

                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.DamageDevice", b =>
                {
                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.HotPotInventory", b =>
                {
                    b.Navigation("ConditionLogs");

                    b.Navigation("RentOrderDetails");

                    b.Navigation("ReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Hotpot", b =>
                {
                    b.Navigation("InventoryUnits");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Ingredient", b =>
                {
                    b.Navigation("ComboIngredients");

                    b.Navigation("CustomizationIngredients");

                    b.Navigation("IngredientBatches");

                    b.Navigation("IngredientPrices");

                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.IngredientType", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Order", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Payments");

                    b.Navigation("Receipts");

                    b.Navigation("RentOrder");

                    b.Navigation("SellOrder");

                    b.Navigation("ShippingOrder");

                    b.Navigation("StaffAssignments");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Payment", b =>
                {
                    b.Navigation("Receipt")
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.RentOrder", b =>
                {
                    b.Navigation("RentOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SellOrder", b =>
                {
                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.SizeDiscount", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.TurtorialVideo", b =>
                {
                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.User", b =>
                {
                    b.Navigation("CustomerReplacementRequests");

                    b.Navigation("Customizations");

                    b.Navigation("Feedbacks");

                    b.Navigation("ManagedAssignments");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("PreparedOrders");

                    b.Navigation("ShippingOrders");

                    b.Navigation("StaffAssignments");

                    b.Navigation("StaffReplacementRequests");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Utensil", b =>
                {
                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.UtensilType", b =>
                {
                    b.Navigation("Utensils");
                });

            modelBuilder.Entity("Capstone.HPTY.ModelLayer.Entities.Vehicle", b =>
                {
                    b.Navigation("ShippingOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
